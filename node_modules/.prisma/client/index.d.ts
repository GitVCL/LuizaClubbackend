
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Produto
 * 
 */
export type Produto = $Result.DefaultSelection<Prisma.$ProdutoPayload>
/**
 * Model Comanda
 * 
 */
export type Comanda = $Result.DefaultSelection<Prisma.$ComandaPayload>
/**
 * Model Quarto
 * 
 */
export type Quarto = $Result.DefaultSelection<Prisma.$QuartoPayload>
/**
 * Model Finalizado
 * 
 */
export type Finalizado = $Result.DefaultSelection<Prisma.$FinalizadoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.ProdutoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comanda`: Exposes CRUD operations for the **Comanda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comandas
    * const comandas = await prisma.comanda.findMany()
    * ```
    */
  get comanda(): Prisma.ComandaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quarto`: Exposes CRUD operations for the **Quarto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quartos
    * const quartos = await prisma.quarto.findMany()
    * ```
    */
  get quarto(): Prisma.QuartoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.finalizado`: Exposes CRUD operations for the **Finalizado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Finalizados
    * const finalizados = await prisma.finalizado.findMany()
    * ```
    */
  get finalizado(): Prisma.FinalizadoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Produto: 'Produto',
    Comanda: 'Comanda',
    Quarto: 'Quarto',
    Finalizado: 'Finalizado'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "produto" | "comanda" | "quarto" | "finalizado"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Produto: {
        payload: Prisma.$ProdutoPayload<ExtArgs>
        fields: Prisma.ProdutoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findFirst: {
            args: Prisma.ProdutoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findMany: {
            args: Prisma.ProdutoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          create: {
            args: Prisma.ProdutoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          createMany: {
            args: Prisma.ProdutoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProdutoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          delete: {
            args: Prisma.ProdutoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          update: {
            args: Prisma.ProdutoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProdutoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          upsert: {
            args: Prisma.ProdutoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduto>
          }
          groupBy: {
            args: Prisma.ProdutoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutoCountAggregateOutputType> | number
          }
        }
      }
      Comanda: {
        payload: Prisma.$ComandaPayload<ExtArgs>
        fields: Prisma.ComandaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComandaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComandaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComandaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComandaPayload>
          }
          findFirst: {
            args: Prisma.ComandaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComandaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComandaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComandaPayload>
          }
          findMany: {
            args: Prisma.ComandaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComandaPayload>[]
          }
          create: {
            args: Prisma.ComandaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComandaPayload>
          }
          createMany: {
            args: Prisma.ComandaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComandaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComandaPayload>[]
          }
          delete: {
            args: Prisma.ComandaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComandaPayload>
          }
          update: {
            args: Prisma.ComandaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComandaPayload>
          }
          deleteMany: {
            args: Prisma.ComandaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComandaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ComandaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComandaPayload>[]
          }
          upsert: {
            args: Prisma.ComandaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComandaPayload>
          }
          aggregate: {
            args: Prisma.ComandaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComanda>
          }
          groupBy: {
            args: Prisma.ComandaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComandaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComandaCountArgs<ExtArgs>
            result: $Utils.Optional<ComandaCountAggregateOutputType> | number
          }
        }
      }
      Quarto: {
        payload: Prisma.$QuartoPayload<ExtArgs>
        fields: Prisma.QuartoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuartoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuartoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuartoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuartoPayload>
          }
          findFirst: {
            args: Prisma.QuartoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuartoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuartoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuartoPayload>
          }
          findMany: {
            args: Prisma.QuartoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuartoPayload>[]
          }
          create: {
            args: Prisma.QuartoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuartoPayload>
          }
          createMany: {
            args: Prisma.QuartoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuartoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuartoPayload>[]
          }
          delete: {
            args: Prisma.QuartoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuartoPayload>
          }
          update: {
            args: Prisma.QuartoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuartoPayload>
          }
          deleteMany: {
            args: Prisma.QuartoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuartoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuartoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuartoPayload>[]
          }
          upsert: {
            args: Prisma.QuartoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuartoPayload>
          }
          aggregate: {
            args: Prisma.QuartoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuarto>
          }
          groupBy: {
            args: Prisma.QuartoGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuartoGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuartoCountArgs<ExtArgs>
            result: $Utils.Optional<QuartoCountAggregateOutputType> | number
          }
        }
      }
      Finalizado: {
        payload: Prisma.$FinalizadoPayload<ExtArgs>
        fields: Prisma.FinalizadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FinalizadoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalizadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FinalizadoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalizadoPayload>
          }
          findFirst: {
            args: Prisma.FinalizadoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalizadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FinalizadoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalizadoPayload>
          }
          findMany: {
            args: Prisma.FinalizadoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalizadoPayload>[]
          }
          create: {
            args: Prisma.FinalizadoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalizadoPayload>
          }
          createMany: {
            args: Prisma.FinalizadoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FinalizadoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalizadoPayload>[]
          }
          delete: {
            args: Prisma.FinalizadoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalizadoPayload>
          }
          update: {
            args: Prisma.FinalizadoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalizadoPayload>
          }
          deleteMany: {
            args: Prisma.FinalizadoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FinalizadoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FinalizadoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalizadoPayload>[]
          }
          upsert: {
            args: Prisma.FinalizadoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinalizadoPayload>
          }
          aggregate: {
            args: Prisma.FinalizadoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFinalizado>
          }
          groupBy: {
            args: Prisma.FinalizadoGroupByArgs<ExtArgs>
            result: $Utils.Optional<FinalizadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.FinalizadoCountArgs<ExtArgs>
            result: $Utils.Optional<FinalizadoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    produto?: ProdutoOmit
    comanda?: ComandaOmit
    quarto?: QuartoOmit
    finalizado?: FinalizadoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    produtos: number
    comandas: number
    quartos: number
    finalizados: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produtos?: boolean | UsuarioCountOutputTypeCountProdutosArgs
    comandas?: boolean | UsuarioCountOutputTypeCountComandasArgs
    quartos?: boolean | UsuarioCountOutputTypeCountQuartosArgs
    finalizados?: boolean | UsuarioCountOutputTypeCountFinalizadosArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountComandasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComandaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountQuartosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuartoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountFinalizadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinalizadoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: string | null
    email: string | null
    senha: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: string | null
    email: string | null
    senha: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    email: number
    senha: number
    _all: number
  }


  export type UsuarioMinAggregateInputType = {
    id?: true
    email?: true
    senha?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    email?: true
    senha?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    email?: true
    senha?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: string
    email: string
    senha: string
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
    produtos?: boolean | Usuario$produtosArgs<ExtArgs>
    comandas?: boolean | Usuario$comandasArgs<ExtArgs>
    quartos?: boolean | Usuario$quartosArgs<ExtArgs>
    finalizados?: boolean | Usuario$finalizadosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    senha?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    email?: boolean
    senha?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "senha", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produtos?: boolean | Usuario$produtosArgs<ExtArgs>
    comandas?: boolean | Usuario$comandasArgs<ExtArgs>
    quartos?: boolean | Usuario$quartosArgs<ExtArgs>
    finalizados?: boolean | Usuario$finalizadosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      produtos: Prisma.$ProdutoPayload<ExtArgs>[]
      comandas: Prisma.$ComandaPayload<ExtArgs>[]
      quartos: Prisma.$QuartoPayload<ExtArgs>[]
      finalizados: Prisma.$FinalizadoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      senha: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produtos<T extends Usuario$produtosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$produtosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comandas<T extends Usuario$comandasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$comandasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    quartos<T extends Usuario$quartosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$quartosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    finalizados<T extends Usuario$finalizadosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$finalizadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.produtos
   */
  export type Usuario$produtosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    cursor?: ProdutoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Usuario.comandas
   */
  export type Usuario$comandasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaInclude<ExtArgs> | null
    where?: ComandaWhereInput
    orderBy?: ComandaOrderByWithRelationInput | ComandaOrderByWithRelationInput[]
    cursor?: ComandaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComandaScalarFieldEnum | ComandaScalarFieldEnum[]
  }

  /**
   * Usuario.quartos
   */
  export type Usuario$quartosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoInclude<ExtArgs> | null
    where?: QuartoWhereInput
    orderBy?: QuartoOrderByWithRelationInput | QuartoOrderByWithRelationInput[]
    cursor?: QuartoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuartoScalarFieldEnum | QuartoScalarFieldEnum[]
  }

  /**
   * Usuario.finalizados
   */
  export type Usuario$finalizadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoInclude<ExtArgs> | null
    where?: FinalizadoWhereInput
    orderBy?: FinalizadoOrderByWithRelationInput | FinalizadoOrderByWithRelationInput[]
    cursor?: FinalizadoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FinalizadoScalarFieldEnum | FinalizadoScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Produto
   */

  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    valor: number | null
    unidades: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    valor: number | null
    unidades: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    valor: number | null
    unidades: number | null
    userId: string | null
  }

  export type ProdutoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    valor: number | null
    unidades: number | null
    userId: string | null
  }

  export type ProdutoCountAggregateOutputType = {
    id: number
    nome: number
    valor: number
    unidades: number
    variantes: number
    userId: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    valor?: true
    unidades?: true
  }

  export type ProdutoSumAggregateInputType = {
    valor?: true
    unidades?: true
  }

  export type ProdutoMinAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
    unidades?: true
    userId?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
    unidades?: true
    userId?: true
  }

  export type ProdutoCountAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
    unidades?: true
    variantes?: true
    userId?: true
    _all?: true
  }

  export type ProdutoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produto to aggregate.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithAggregationInput | ProdutoOrderByWithAggregationInput[]
    by: ProdutoScalarFieldEnum[] | ProdutoScalarFieldEnum
    having?: ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }

  export type ProdutoGroupByOutputType = {
    id: string
    nome: string
    valor: number
    unidades: number
    variantes: string[]
    userId: string
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    valor?: boolean
    unidades?: boolean
    variantes?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    valor?: boolean
    unidades?: boolean
    variantes?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    valor?: boolean
    unidades?: boolean
    variantes?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>

  export type ProdutoSelectScalar = {
    id?: boolean
    nome?: boolean
    valor?: boolean
    unidades?: boolean
    variantes?: boolean
    userId?: boolean
  }

  export type ProdutoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "valor" | "unidades" | "variantes" | "userId", ExtArgs["result"]["produto"]>
  export type ProdutoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type ProdutoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type ProdutoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $ProdutoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produto"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      valor: number
      unidades: number
      variantes: string[]
      userId: string
    }, ExtArgs["result"]["produto"]>
    composites: {}
  }

  type ProdutoGetPayload<S extends boolean | null | undefined | ProdutoDefaultArgs> = $Result.GetResult<Prisma.$ProdutoPayload, S>

  type ProdutoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProdutoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProdutoCountAggregateInputType | true
    }

  export interface ProdutoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produto'], meta: { name: 'Produto' } }
    /**
     * Find zero or one Produto that matches the filter.
     * @param {ProdutoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutoFindUniqueArgs>(args: SelectSubset<T, ProdutoFindUniqueArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Produto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutoFindFirstArgs>(args?: SelectSubset<T, ProdutoFindFirstArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Produto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoWithIdOnly = await prisma.produto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutoFindManyArgs>(args?: SelectSubset<T, ProdutoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Produto.
     * @param {ProdutoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
     */
    create<T extends ProdutoCreateArgs>(args: SelectSubset<T, ProdutoCreateArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Produtos.
     * @param {ProdutoCreateManyArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produto = await prisma.produto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutoCreateManyArgs>(args?: SelectSubset<T, ProdutoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Produtos and returns the data saved in the database.
     * @param {ProdutoCreateManyAndReturnArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produto = await prisma.produto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Produtos and only return the `id`
     * const produtoWithIdOnly = await prisma.produto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProdutoCreateManyAndReturnArgs>(args?: SelectSubset<T, ProdutoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Produto.
     * @param {ProdutoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
     */
    delete<T extends ProdutoDeleteArgs>(args: SelectSubset<T, ProdutoDeleteArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Produto.
     * @param {ProdutoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutoUpdateArgs>(args: SelectSubset<T, ProdutoUpdateArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutoDeleteManyArgs>(args?: SelectSubset<T, ProdutoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutoUpdateManyArgs>(args: SelectSubset<T, ProdutoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos and returns the data updated in the database.
     * @param {ProdutoUpdateManyAndReturnArgs} args - Arguments to update many Produtos.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Produtos and only return the `id`
     * const produtoWithIdOnly = await prisma.produto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProdutoUpdateManyAndReturnArgs>(args: SelectSubset<T, ProdutoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Produto.
     * @param {ProdutoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
     */
    upsert<T extends ProdutoUpsertArgs>(args: SelectSubset<T, ProdutoUpsertArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCountArgs>(
      args?: Subset<T, ProdutoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): Prisma.PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produto model
   */
  readonly fields: ProdutoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produto model
   */
  interface ProdutoFieldRefs {
    readonly id: FieldRef<"Produto", 'String'>
    readonly nome: FieldRef<"Produto", 'String'>
    readonly valor: FieldRef<"Produto", 'Float'>
    readonly unidades: FieldRef<"Produto", 'Int'>
    readonly variantes: FieldRef<"Produto", 'String[]'>
    readonly userId: FieldRef<"Produto", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Produto findUnique
   */
  export type ProdutoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findUniqueOrThrow
   */
  export type ProdutoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findFirst
   */
  export type ProdutoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto findFirstOrThrow
   */
  export type ProdutoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto findMany
   */
  export type ProdutoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto create
   */
  export type ProdutoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to create a Produto.
     */
    data: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
  }

  /**
   * Produto createMany
   */
  export type ProdutoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produto createManyAndReturn
   */
  export type ProdutoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Produto update
   */
  export type ProdutoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to update a Produto.
     */
    data: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Produto to update.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto updateMany
   */
  export type ProdutoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
    /**
     * Limit how many Produtos to update.
     */
    limit?: number
  }

  /**
   * Produto updateManyAndReturn
   */
  export type ProdutoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
    /**
     * Limit how many Produtos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Produto upsert
   */
  export type ProdutoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The filter to search for the Produto to update in case it exists.
     */
    where: ProdutoWhereUniqueInput
    /**
     * In case the Produto found by the `where` argument doesn't exist, create a new Produto with this data.
     */
    create: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
    /**
     * In case the Produto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
  }

  /**
   * Produto delete
   */
  export type ProdutoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter which Produto to delete.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto deleteMany
   */
  export type ProdutoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutoWhereInput
    /**
     * Limit how many Produtos to delete.
     */
    limit?: number
  }

  /**
   * Produto without action
   */
  export type ProdutoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
  }


  /**
   * Model Comanda
   */

  export type AggregateComanda = {
    _count: ComandaCountAggregateOutputType | null
    _avg: ComandaAvgAggregateOutputType | null
    _sum: ComandaSumAggregateOutputType | null
    _min: ComandaMinAggregateOutputType | null
    _max: ComandaMaxAggregateOutputType | null
  }

  export type ComandaAvgAggregateOutputType = {
    total: number | null
  }

  export type ComandaSumAggregateOutputType = {
    total: number | null
  }

  export type ComandaMinAggregateOutputType = {
    id: string | null
    nome: string | null
    total: number | null
    dono: string | null
    status: string | null
    criadaEm: Date | null
    encerradaEm: Date | null
    userId: string | null
  }

  export type ComandaMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    total: number | null
    dono: string | null
    status: string | null
    criadaEm: Date | null
    encerradaEm: Date | null
    userId: string | null
  }

  export type ComandaCountAggregateOutputType = {
    id: number
    nome: number
    itens: number
    total: number
    dono: number
    status: number
    criadaEm: number
    encerradaEm: number
    userId: number
    _all: number
  }


  export type ComandaAvgAggregateInputType = {
    total?: true
  }

  export type ComandaSumAggregateInputType = {
    total?: true
  }

  export type ComandaMinAggregateInputType = {
    id?: true
    nome?: true
    total?: true
    dono?: true
    status?: true
    criadaEm?: true
    encerradaEm?: true
    userId?: true
  }

  export type ComandaMaxAggregateInputType = {
    id?: true
    nome?: true
    total?: true
    dono?: true
    status?: true
    criadaEm?: true
    encerradaEm?: true
    userId?: true
  }

  export type ComandaCountAggregateInputType = {
    id?: true
    nome?: true
    itens?: true
    total?: true
    dono?: true
    status?: true
    criadaEm?: true
    encerradaEm?: true
    userId?: true
    _all?: true
  }

  export type ComandaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comanda to aggregate.
     */
    where?: ComandaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comandas to fetch.
     */
    orderBy?: ComandaOrderByWithRelationInput | ComandaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComandaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comandas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comandas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comandas
    **/
    _count?: true | ComandaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComandaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComandaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComandaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComandaMaxAggregateInputType
  }

  export type GetComandaAggregateType<T extends ComandaAggregateArgs> = {
        [P in keyof T & keyof AggregateComanda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComanda[P]>
      : GetScalarType<T[P], AggregateComanda[P]>
  }




  export type ComandaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComandaWhereInput
    orderBy?: ComandaOrderByWithAggregationInput | ComandaOrderByWithAggregationInput[]
    by: ComandaScalarFieldEnum[] | ComandaScalarFieldEnum
    having?: ComandaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComandaCountAggregateInputType | true
    _avg?: ComandaAvgAggregateInputType
    _sum?: ComandaSumAggregateInputType
    _min?: ComandaMinAggregateInputType
    _max?: ComandaMaxAggregateInputType
  }

  export type ComandaGroupByOutputType = {
    id: string
    nome: string
    itens: JsonValue
    total: number
    dono: string
    status: string
    criadaEm: Date
    encerradaEm: Date | null
    userId: string
    _count: ComandaCountAggregateOutputType | null
    _avg: ComandaAvgAggregateOutputType | null
    _sum: ComandaSumAggregateOutputType | null
    _min: ComandaMinAggregateOutputType | null
    _max: ComandaMaxAggregateOutputType | null
  }

  type GetComandaGroupByPayload<T extends ComandaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComandaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComandaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComandaGroupByOutputType[P]>
            : GetScalarType<T[P], ComandaGroupByOutputType[P]>
        }
      >
    >


  export type ComandaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    itens?: boolean
    total?: boolean
    dono?: boolean
    status?: boolean
    criadaEm?: boolean
    encerradaEm?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comanda"]>

  export type ComandaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    itens?: boolean
    total?: boolean
    dono?: boolean
    status?: boolean
    criadaEm?: boolean
    encerradaEm?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comanda"]>

  export type ComandaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    itens?: boolean
    total?: boolean
    dono?: boolean
    status?: boolean
    criadaEm?: boolean
    encerradaEm?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comanda"]>

  export type ComandaSelectScalar = {
    id?: boolean
    nome?: boolean
    itens?: boolean
    total?: boolean
    dono?: boolean
    status?: boolean
    criadaEm?: boolean
    encerradaEm?: boolean
    userId?: boolean
  }

  export type ComandaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "itens" | "total" | "dono" | "status" | "criadaEm" | "encerradaEm" | "userId", ExtArgs["result"]["comanda"]>
  export type ComandaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type ComandaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type ComandaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $ComandaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comanda"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      itens: Prisma.JsonValue
      total: number
      dono: string
      status: string
      criadaEm: Date
      encerradaEm: Date | null
      userId: string
    }, ExtArgs["result"]["comanda"]>
    composites: {}
  }

  type ComandaGetPayload<S extends boolean | null | undefined | ComandaDefaultArgs> = $Result.GetResult<Prisma.$ComandaPayload, S>

  type ComandaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComandaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComandaCountAggregateInputType | true
    }

  export interface ComandaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comanda'], meta: { name: 'Comanda' } }
    /**
     * Find zero or one Comanda that matches the filter.
     * @param {ComandaFindUniqueArgs} args - Arguments to find a Comanda
     * @example
     * // Get one Comanda
     * const comanda = await prisma.comanda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComandaFindUniqueArgs>(args: SelectSubset<T, ComandaFindUniqueArgs<ExtArgs>>): Prisma__ComandaClient<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comanda that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComandaFindUniqueOrThrowArgs} args - Arguments to find a Comanda
     * @example
     * // Get one Comanda
     * const comanda = await prisma.comanda.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComandaFindUniqueOrThrowArgs>(args: SelectSubset<T, ComandaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComandaClient<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comanda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComandaFindFirstArgs} args - Arguments to find a Comanda
     * @example
     * // Get one Comanda
     * const comanda = await prisma.comanda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComandaFindFirstArgs>(args?: SelectSubset<T, ComandaFindFirstArgs<ExtArgs>>): Prisma__ComandaClient<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comanda that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComandaFindFirstOrThrowArgs} args - Arguments to find a Comanda
     * @example
     * // Get one Comanda
     * const comanda = await prisma.comanda.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComandaFindFirstOrThrowArgs>(args?: SelectSubset<T, ComandaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComandaClient<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comandas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComandaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comandas
     * const comandas = await prisma.comanda.findMany()
     * 
     * // Get first 10 Comandas
     * const comandas = await prisma.comanda.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const comandaWithIdOnly = await prisma.comanda.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComandaFindManyArgs>(args?: SelectSubset<T, ComandaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comanda.
     * @param {ComandaCreateArgs} args - Arguments to create a Comanda.
     * @example
     * // Create one Comanda
     * const Comanda = await prisma.comanda.create({
     *   data: {
     *     // ... data to create a Comanda
     *   }
     * })
     * 
     */
    create<T extends ComandaCreateArgs>(args: SelectSubset<T, ComandaCreateArgs<ExtArgs>>): Prisma__ComandaClient<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comandas.
     * @param {ComandaCreateManyArgs} args - Arguments to create many Comandas.
     * @example
     * // Create many Comandas
     * const comanda = await prisma.comanda.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComandaCreateManyArgs>(args?: SelectSubset<T, ComandaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comandas and returns the data saved in the database.
     * @param {ComandaCreateManyAndReturnArgs} args - Arguments to create many Comandas.
     * @example
     * // Create many Comandas
     * const comanda = await prisma.comanda.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comandas and only return the `id`
     * const comandaWithIdOnly = await prisma.comanda.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComandaCreateManyAndReturnArgs>(args?: SelectSubset<T, ComandaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comanda.
     * @param {ComandaDeleteArgs} args - Arguments to delete one Comanda.
     * @example
     * // Delete one Comanda
     * const Comanda = await prisma.comanda.delete({
     *   where: {
     *     // ... filter to delete one Comanda
     *   }
     * })
     * 
     */
    delete<T extends ComandaDeleteArgs>(args: SelectSubset<T, ComandaDeleteArgs<ExtArgs>>): Prisma__ComandaClient<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comanda.
     * @param {ComandaUpdateArgs} args - Arguments to update one Comanda.
     * @example
     * // Update one Comanda
     * const comanda = await prisma.comanda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComandaUpdateArgs>(args: SelectSubset<T, ComandaUpdateArgs<ExtArgs>>): Prisma__ComandaClient<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comandas.
     * @param {ComandaDeleteManyArgs} args - Arguments to filter Comandas to delete.
     * @example
     * // Delete a few Comandas
     * const { count } = await prisma.comanda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComandaDeleteManyArgs>(args?: SelectSubset<T, ComandaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comandas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComandaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comandas
     * const comanda = await prisma.comanda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComandaUpdateManyArgs>(args: SelectSubset<T, ComandaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comandas and returns the data updated in the database.
     * @param {ComandaUpdateManyAndReturnArgs} args - Arguments to update many Comandas.
     * @example
     * // Update many Comandas
     * const comanda = await prisma.comanda.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comandas and only return the `id`
     * const comandaWithIdOnly = await prisma.comanda.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ComandaUpdateManyAndReturnArgs>(args: SelectSubset<T, ComandaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comanda.
     * @param {ComandaUpsertArgs} args - Arguments to update or create a Comanda.
     * @example
     * // Update or create a Comanda
     * const comanda = await prisma.comanda.upsert({
     *   create: {
     *     // ... data to create a Comanda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comanda we want to update
     *   }
     * })
     */
    upsert<T extends ComandaUpsertArgs>(args: SelectSubset<T, ComandaUpsertArgs<ExtArgs>>): Prisma__ComandaClient<$Result.GetResult<Prisma.$ComandaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comandas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComandaCountArgs} args - Arguments to filter Comandas to count.
     * @example
     * // Count the number of Comandas
     * const count = await prisma.comanda.count({
     *   where: {
     *     // ... the filter for the Comandas we want to count
     *   }
     * })
    **/
    count<T extends ComandaCountArgs>(
      args?: Subset<T, ComandaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComandaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comanda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComandaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComandaAggregateArgs>(args: Subset<T, ComandaAggregateArgs>): Prisma.PrismaPromise<GetComandaAggregateType<T>>

    /**
     * Group by Comanda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComandaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComandaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComandaGroupByArgs['orderBy'] }
        : { orderBy?: ComandaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComandaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComandaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comanda model
   */
  readonly fields: ComandaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comanda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComandaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comanda model
   */
  interface ComandaFieldRefs {
    readonly id: FieldRef<"Comanda", 'String'>
    readonly nome: FieldRef<"Comanda", 'String'>
    readonly itens: FieldRef<"Comanda", 'Json'>
    readonly total: FieldRef<"Comanda", 'Float'>
    readonly dono: FieldRef<"Comanda", 'String'>
    readonly status: FieldRef<"Comanda", 'String'>
    readonly criadaEm: FieldRef<"Comanda", 'DateTime'>
    readonly encerradaEm: FieldRef<"Comanda", 'DateTime'>
    readonly userId: FieldRef<"Comanda", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comanda findUnique
   */
  export type ComandaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaInclude<ExtArgs> | null
    /**
     * Filter, which Comanda to fetch.
     */
    where: ComandaWhereUniqueInput
  }

  /**
   * Comanda findUniqueOrThrow
   */
  export type ComandaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaInclude<ExtArgs> | null
    /**
     * Filter, which Comanda to fetch.
     */
    where: ComandaWhereUniqueInput
  }

  /**
   * Comanda findFirst
   */
  export type ComandaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaInclude<ExtArgs> | null
    /**
     * Filter, which Comanda to fetch.
     */
    where?: ComandaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comandas to fetch.
     */
    orderBy?: ComandaOrderByWithRelationInput | ComandaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comandas.
     */
    cursor?: ComandaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comandas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comandas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comandas.
     */
    distinct?: ComandaScalarFieldEnum | ComandaScalarFieldEnum[]
  }

  /**
   * Comanda findFirstOrThrow
   */
  export type ComandaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaInclude<ExtArgs> | null
    /**
     * Filter, which Comanda to fetch.
     */
    where?: ComandaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comandas to fetch.
     */
    orderBy?: ComandaOrderByWithRelationInput | ComandaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comandas.
     */
    cursor?: ComandaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comandas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comandas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comandas.
     */
    distinct?: ComandaScalarFieldEnum | ComandaScalarFieldEnum[]
  }

  /**
   * Comanda findMany
   */
  export type ComandaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaInclude<ExtArgs> | null
    /**
     * Filter, which Comandas to fetch.
     */
    where?: ComandaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comandas to fetch.
     */
    orderBy?: ComandaOrderByWithRelationInput | ComandaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comandas.
     */
    cursor?: ComandaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comandas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comandas.
     */
    skip?: number
    distinct?: ComandaScalarFieldEnum | ComandaScalarFieldEnum[]
  }

  /**
   * Comanda create
   */
  export type ComandaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaInclude<ExtArgs> | null
    /**
     * The data needed to create a Comanda.
     */
    data: XOR<ComandaCreateInput, ComandaUncheckedCreateInput>
  }

  /**
   * Comanda createMany
   */
  export type ComandaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comandas.
     */
    data: ComandaCreateManyInput | ComandaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comanda createManyAndReturn
   */
  export type ComandaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * The data used to create many Comandas.
     */
    data: ComandaCreateManyInput | ComandaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comanda update
   */
  export type ComandaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaInclude<ExtArgs> | null
    /**
     * The data needed to update a Comanda.
     */
    data: XOR<ComandaUpdateInput, ComandaUncheckedUpdateInput>
    /**
     * Choose, which Comanda to update.
     */
    where: ComandaWhereUniqueInput
  }

  /**
   * Comanda updateMany
   */
  export type ComandaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comandas.
     */
    data: XOR<ComandaUpdateManyMutationInput, ComandaUncheckedUpdateManyInput>
    /**
     * Filter which Comandas to update
     */
    where?: ComandaWhereInput
    /**
     * Limit how many Comandas to update.
     */
    limit?: number
  }

  /**
   * Comanda updateManyAndReturn
   */
  export type ComandaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * The data used to update Comandas.
     */
    data: XOR<ComandaUpdateManyMutationInput, ComandaUncheckedUpdateManyInput>
    /**
     * Filter which Comandas to update
     */
    where?: ComandaWhereInput
    /**
     * Limit how many Comandas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comanda upsert
   */
  export type ComandaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaInclude<ExtArgs> | null
    /**
     * The filter to search for the Comanda to update in case it exists.
     */
    where: ComandaWhereUniqueInput
    /**
     * In case the Comanda found by the `where` argument doesn't exist, create a new Comanda with this data.
     */
    create: XOR<ComandaCreateInput, ComandaUncheckedCreateInput>
    /**
     * In case the Comanda was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComandaUpdateInput, ComandaUncheckedUpdateInput>
  }

  /**
   * Comanda delete
   */
  export type ComandaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaInclude<ExtArgs> | null
    /**
     * Filter which Comanda to delete.
     */
    where: ComandaWhereUniqueInput
  }

  /**
   * Comanda deleteMany
   */
  export type ComandaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comandas to delete
     */
    where?: ComandaWhereInput
    /**
     * Limit how many Comandas to delete.
     */
    limit?: number
  }

  /**
   * Comanda without action
   */
  export type ComandaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comanda
     */
    select?: ComandaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comanda
     */
    omit?: ComandaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComandaInclude<ExtArgs> | null
  }


  /**
   * Model Quarto
   */

  export type AggregateQuarto = {
    _count: QuartoCountAggregateOutputType | null
    _avg: QuartoAvgAggregateOutputType | null
    _sum: QuartoSumAggregateOutputType | null
    _min: QuartoMinAggregateOutputType | null
    _max: QuartoMaxAggregateOutputType | null
  }

  export type QuartoAvgAggregateOutputType = {
    valor: number | null
    multa: number | null
    taxa: number | null
  }

  export type QuartoSumAggregateOutputType = {
    valor: number | null
    multa: number | null
    taxa: number | null
  }

  export type QuartoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    tempo: string | null
    valor: number | null
    observacoes: string | null
    multa: number | null
    taxa: number | null
    status: string | null
    criadaEm: Date | null
    encerradoEm: Date | null
    userId: string | null
  }

  export type QuartoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    tempo: string | null
    valor: number | null
    observacoes: string | null
    multa: number | null
    taxa: number | null
    status: string | null
    criadaEm: Date | null
    encerradoEm: Date | null
    userId: string | null
  }

  export type QuartoCountAggregateOutputType = {
    id: number
    nome: number
    tempo: number
    valor: number
    observacoes: number
    multa: number
    taxa: number
    itens: number
    status: number
    criadaEm: number
    encerradoEm: number
    userId: number
    _all: number
  }


  export type QuartoAvgAggregateInputType = {
    valor?: true
    multa?: true
    taxa?: true
  }

  export type QuartoSumAggregateInputType = {
    valor?: true
    multa?: true
    taxa?: true
  }

  export type QuartoMinAggregateInputType = {
    id?: true
    nome?: true
    tempo?: true
    valor?: true
    observacoes?: true
    multa?: true
    taxa?: true
    status?: true
    criadaEm?: true
    encerradoEm?: true
    userId?: true
  }

  export type QuartoMaxAggregateInputType = {
    id?: true
    nome?: true
    tempo?: true
    valor?: true
    observacoes?: true
    multa?: true
    taxa?: true
    status?: true
    criadaEm?: true
    encerradoEm?: true
    userId?: true
  }

  export type QuartoCountAggregateInputType = {
    id?: true
    nome?: true
    tempo?: true
    valor?: true
    observacoes?: true
    multa?: true
    taxa?: true
    itens?: true
    status?: true
    criadaEm?: true
    encerradoEm?: true
    userId?: true
    _all?: true
  }

  export type QuartoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quarto to aggregate.
     */
    where?: QuartoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quartos to fetch.
     */
    orderBy?: QuartoOrderByWithRelationInput | QuartoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuartoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quartos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quartos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quartos
    **/
    _count?: true | QuartoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuartoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuartoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuartoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuartoMaxAggregateInputType
  }

  export type GetQuartoAggregateType<T extends QuartoAggregateArgs> = {
        [P in keyof T & keyof AggregateQuarto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuarto[P]>
      : GetScalarType<T[P], AggregateQuarto[P]>
  }




  export type QuartoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuartoWhereInput
    orderBy?: QuartoOrderByWithAggregationInput | QuartoOrderByWithAggregationInput[]
    by: QuartoScalarFieldEnum[] | QuartoScalarFieldEnum
    having?: QuartoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuartoCountAggregateInputType | true
    _avg?: QuartoAvgAggregateInputType
    _sum?: QuartoSumAggregateInputType
    _min?: QuartoMinAggregateInputType
    _max?: QuartoMaxAggregateInputType
  }

  export type QuartoGroupByOutputType = {
    id: string
    nome: string
    tempo: string
    valor: number
    observacoes: string
    multa: number
    taxa: number
    itens: JsonValue
    status: string
    criadaEm: Date
    encerradoEm: Date | null
    userId: string
    _count: QuartoCountAggregateOutputType | null
    _avg: QuartoAvgAggregateOutputType | null
    _sum: QuartoSumAggregateOutputType | null
    _min: QuartoMinAggregateOutputType | null
    _max: QuartoMaxAggregateOutputType | null
  }

  type GetQuartoGroupByPayload<T extends QuartoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuartoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuartoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuartoGroupByOutputType[P]>
            : GetScalarType<T[P], QuartoGroupByOutputType[P]>
        }
      >
    >


  export type QuartoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    tempo?: boolean
    valor?: boolean
    observacoes?: boolean
    multa?: boolean
    taxa?: boolean
    itens?: boolean
    status?: boolean
    criadaEm?: boolean
    encerradoEm?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quarto"]>

  export type QuartoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    tempo?: boolean
    valor?: boolean
    observacoes?: boolean
    multa?: boolean
    taxa?: boolean
    itens?: boolean
    status?: boolean
    criadaEm?: boolean
    encerradoEm?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quarto"]>

  export type QuartoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    tempo?: boolean
    valor?: boolean
    observacoes?: boolean
    multa?: boolean
    taxa?: boolean
    itens?: boolean
    status?: boolean
    criadaEm?: boolean
    encerradoEm?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quarto"]>

  export type QuartoSelectScalar = {
    id?: boolean
    nome?: boolean
    tempo?: boolean
    valor?: boolean
    observacoes?: boolean
    multa?: boolean
    taxa?: boolean
    itens?: boolean
    status?: boolean
    criadaEm?: boolean
    encerradoEm?: boolean
    userId?: boolean
  }

  export type QuartoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "tempo" | "valor" | "observacoes" | "multa" | "taxa" | "itens" | "status" | "criadaEm" | "encerradoEm" | "userId", ExtArgs["result"]["quarto"]>
  export type QuartoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type QuartoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type QuartoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $QuartoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Quarto"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      tempo: string
      valor: number
      observacoes: string
      multa: number
      taxa: number
      itens: Prisma.JsonValue
      status: string
      criadaEm: Date
      encerradoEm: Date | null
      userId: string
    }, ExtArgs["result"]["quarto"]>
    composites: {}
  }

  type QuartoGetPayload<S extends boolean | null | undefined | QuartoDefaultArgs> = $Result.GetResult<Prisma.$QuartoPayload, S>

  type QuartoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuartoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuartoCountAggregateInputType | true
    }

  export interface QuartoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quarto'], meta: { name: 'Quarto' } }
    /**
     * Find zero or one Quarto that matches the filter.
     * @param {QuartoFindUniqueArgs} args - Arguments to find a Quarto
     * @example
     * // Get one Quarto
     * const quarto = await prisma.quarto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuartoFindUniqueArgs>(args: SelectSubset<T, QuartoFindUniqueArgs<ExtArgs>>): Prisma__QuartoClient<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Quarto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuartoFindUniqueOrThrowArgs} args - Arguments to find a Quarto
     * @example
     * // Get one Quarto
     * const quarto = await prisma.quarto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuartoFindUniqueOrThrowArgs>(args: SelectSubset<T, QuartoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuartoClient<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quarto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuartoFindFirstArgs} args - Arguments to find a Quarto
     * @example
     * // Get one Quarto
     * const quarto = await prisma.quarto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuartoFindFirstArgs>(args?: SelectSubset<T, QuartoFindFirstArgs<ExtArgs>>): Prisma__QuartoClient<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Quarto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuartoFindFirstOrThrowArgs} args - Arguments to find a Quarto
     * @example
     * // Get one Quarto
     * const quarto = await prisma.quarto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuartoFindFirstOrThrowArgs>(args?: SelectSubset<T, QuartoFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuartoClient<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Quartos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuartoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quartos
     * const quartos = await prisma.quarto.findMany()
     * 
     * // Get first 10 Quartos
     * const quartos = await prisma.quarto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quartoWithIdOnly = await prisma.quarto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuartoFindManyArgs>(args?: SelectSubset<T, QuartoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Quarto.
     * @param {QuartoCreateArgs} args - Arguments to create a Quarto.
     * @example
     * // Create one Quarto
     * const Quarto = await prisma.quarto.create({
     *   data: {
     *     // ... data to create a Quarto
     *   }
     * })
     * 
     */
    create<T extends QuartoCreateArgs>(args: SelectSubset<T, QuartoCreateArgs<ExtArgs>>): Prisma__QuartoClient<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Quartos.
     * @param {QuartoCreateManyArgs} args - Arguments to create many Quartos.
     * @example
     * // Create many Quartos
     * const quarto = await prisma.quarto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuartoCreateManyArgs>(args?: SelectSubset<T, QuartoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quartos and returns the data saved in the database.
     * @param {QuartoCreateManyAndReturnArgs} args - Arguments to create many Quartos.
     * @example
     * // Create many Quartos
     * const quarto = await prisma.quarto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quartos and only return the `id`
     * const quartoWithIdOnly = await prisma.quarto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuartoCreateManyAndReturnArgs>(args?: SelectSubset<T, QuartoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Quarto.
     * @param {QuartoDeleteArgs} args - Arguments to delete one Quarto.
     * @example
     * // Delete one Quarto
     * const Quarto = await prisma.quarto.delete({
     *   where: {
     *     // ... filter to delete one Quarto
     *   }
     * })
     * 
     */
    delete<T extends QuartoDeleteArgs>(args: SelectSubset<T, QuartoDeleteArgs<ExtArgs>>): Prisma__QuartoClient<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Quarto.
     * @param {QuartoUpdateArgs} args - Arguments to update one Quarto.
     * @example
     * // Update one Quarto
     * const quarto = await prisma.quarto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuartoUpdateArgs>(args: SelectSubset<T, QuartoUpdateArgs<ExtArgs>>): Prisma__QuartoClient<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Quartos.
     * @param {QuartoDeleteManyArgs} args - Arguments to filter Quartos to delete.
     * @example
     * // Delete a few Quartos
     * const { count } = await prisma.quarto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuartoDeleteManyArgs>(args?: SelectSubset<T, QuartoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quartos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuartoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quartos
     * const quarto = await prisma.quarto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuartoUpdateManyArgs>(args: SelectSubset<T, QuartoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quartos and returns the data updated in the database.
     * @param {QuartoUpdateManyAndReturnArgs} args - Arguments to update many Quartos.
     * @example
     * // Update many Quartos
     * const quarto = await prisma.quarto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Quartos and only return the `id`
     * const quartoWithIdOnly = await prisma.quarto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuartoUpdateManyAndReturnArgs>(args: SelectSubset<T, QuartoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Quarto.
     * @param {QuartoUpsertArgs} args - Arguments to update or create a Quarto.
     * @example
     * // Update or create a Quarto
     * const quarto = await prisma.quarto.upsert({
     *   create: {
     *     // ... data to create a Quarto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quarto we want to update
     *   }
     * })
     */
    upsert<T extends QuartoUpsertArgs>(args: SelectSubset<T, QuartoUpsertArgs<ExtArgs>>): Prisma__QuartoClient<$Result.GetResult<Prisma.$QuartoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Quartos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuartoCountArgs} args - Arguments to filter Quartos to count.
     * @example
     * // Count the number of Quartos
     * const count = await prisma.quarto.count({
     *   where: {
     *     // ... the filter for the Quartos we want to count
     *   }
     * })
    **/
    count<T extends QuartoCountArgs>(
      args?: Subset<T, QuartoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuartoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quarto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuartoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuartoAggregateArgs>(args: Subset<T, QuartoAggregateArgs>): Prisma.PrismaPromise<GetQuartoAggregateType<T>>

    /**
     * Group by Quarto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuartoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuartoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuartoGroupByArgs['orderBy'] }
        : { orderBy?: QuartoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuartoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuartoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Quarto model
   */
  readonly fields: QuartoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quarto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuartoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Quarto model
   */
  interface QuartoFieldRefs {
    readonly id: FieldRef<"Quarto", 'String'>
    readonly nome: FieldRef<"Quarto", 'String'>
    readonly tempo: FieldRef<"Quarto", 'String'>
    readonly valor: FieldRef<"Quarto", 'Float'>
    readonly observacoes: FieldRef<"Quarto", 'String'>
    readonly multa: FieldRef<"Quarto", 'Float'>
    readonly taxa: FieldRef<"Quarto", 'Float'>
    readonly itens: FieldRef<"Quarto", 'Json'>
    readonly status: FieldRef<"Quarto", 'String'>
    readonly criadaEm: FieldRef<"Quarto", 'DateTime'>
    readonly encerradoEm: FieldRef<"Quarto", 'DateTime'>
    readonly userId: FieldRef<"Quarto", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Quarto findUnique
   */
  export type QuartoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoInclude<ExtArgs> | null
    /**
     * Filter, which Quarto to fetch.
     */
    where: QuartoWhereUniqueInput
  }

  /**
   * Quarto findUniqueOrThrow
   */
  export type QuartoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoInclude<ExtArgs> | null
    /**
     * Filter, which Quarto to fetch.
     */
    where: QuartoWhereUniqueInput
  }

  /**
   * Quarto findFirst
   */
  export type QuartoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoInclude<ExtArgs> | null
    /**
     * Filter, which Quarto to fetch.
     */
    where?: QuartoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quartos to fetch.
     */
    orderBy?: QuartoOrderByWithRelationInput | QuartoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quartos.
     */
    cursor?: QuartoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quartos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quartos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quartos.
     */
    distinct?: QuartoScalarFieldEnum | QuartoScalarFieldEnum[]
  }

  /**
   * Quarto findFirstOrThrow
   */
  export type QuartoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoInclude<ExtArgs> | null
    /**
     * Filter, which Quarto to fetch.
     */
    where?: QuartoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quartos to fetch.
     */
    orderBy?: QuartoOrderByWithRelationInput | QuartoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quartos.
     */
    cursor?: QuartoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quartos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quartos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quartos.
     */
    distinct?: QuartoScalarFieldEnum | QuartoScalarFieldEnum[]
  }

  /**
   * Quarto findMany
   */
  export type QuartoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoInclude<ExtArgs> | null
    /**
     * Filter, which Quartos to fetch.
     */
    where?: QuartoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quartos to fetch.
     */
    orderBy?: QuartoOrderByWithRelationInput | QuartoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quartos.
     */
    cursor?: QuartoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quartos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quartos.
     */
    skip?: number
    distinct?: QuartoScalarFieldEnum | QuartoScalarFieldEnum[]
  }

  /**
   * Quarto create
   */
  export type QuartoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoInclude<ExtArgs> | null
    /**
     * The data needed to create a Quarto.
     */
    data: XOR<QuartoCreateInput, QuartoUncheckedCreateInput>
  }

  /**
   * Quarto createMany
   */
  export type QuartoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quartos.
     */
    data: QuartoCreateManyInput | QuartoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quarto createManyAndReturn
   */
  export type QuartoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * The data used to create many Quartos.
     */
    data: QuartoCreateManyInput | QuartoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quarto update
   */
  export type QuartoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoInclude<ExtArgs> | null
    /**
     * The data needed to update a Quarto.
     */
    data: XOR<QuartoUpdateInput, QuartoUncheckedUpdateInput>
    /**
     * Choose, which Quarto to update.
     */
    where: QuartoWhereUniqueInput
  }

  /**
   * Quarto updateMany
   */
  export type QuartoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quartos.
     */
    data: XOR<QuartoUpdateManyMutationInput, QuartoUncheckedUpdateManyInput>
    /**
     * Filter which Quartos to update
     */
    where?: QuartoWhereInput
    /**
     * Limit how many Quartos to update.
     */
    limit?: number
  }

  /**
   * Quarto updateManyAndReturn
   */
  export type QuartoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * The data used to update Quartos.
     */
    data: XOR<QuartoUpdateManyMutationInput, QuartoUncheckedUpdateManyInput>
    /**
     * Filter which Quartos to update
     */
    where?: QuartoWhereInput
    /**
     * Limit how many Quartos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quarto upsert
   */
  export type QuartoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoInclude<ExtArgs> | null
    /**
     * The filter to search for the Quarto to update in case it exists.
     */
    where: QuartoWhereUniqueInput
    /**
     * In case the Quarto found by the `where` argument doesn't exist, create a new Quarto with this data.
     */
    create: XOR<QuartoCreateInput, QuartoUncheckedCreateInput>
    /**
     * In case the Quarto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuartoUpdateInput, QuartoUncheckedUpdateInput>
  }

  /**
   * Quarto delete
   */
  export type QuartoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoInclude<ExtArgs> | null
    /**
     * Filter which Quarto to delete.
     */
    where: QuartoWhereUniqueInput
  }

  /**
   * Quarto deleteMany
   */
  export type QuartoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quartos to delete
     */
    where?: QuartoWhereInput
    /**
     * Limit how many Quartos to delete.
     */
    limit?: number
  }

  /**
   * Quarto without action
   */
  export type QuartoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quarto
     */
    select?: QuartoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Quarto
     */
    omit?: QuartoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuartoInclude<ExtArgs> | null
  }


  /**
   * Model Finalizado
   */

  export type AggregateFinalizado = {
    _count: FinalizadoCountAggregateOutputType | null
    _avg: FinalizadoAvgAggregateOutputType | null
    _sum: FinalizadoSumAggregateOutputType | null
    _min: FinalizadoMinAggregateOutputType | null
    _max: FinalizadoMaxAggregateOutputType | null
  }

  export type FinalizadoAvgAggregateOutputType = {
    total: number | null
  }

  export type FinalizadoSumAggregateOutputType = {
    total: number | null
  }

  export type FinalizadoMinAggregateOutputType = {
    id: string | null
    tipo: string | null
    data: Date | null
    total: number | null
    dono: string | null
    userId: string | null
  }

  export type FinalizadoMaxAggregateOutputType = {
    id: string | null
    tipo: string | null
    data: Date | null
    total: number | null
    dono: string | null
    userId: string | null
  }

  export type FinalizadoCountAggregateOutputType = {
    id: number
    tipo: number
    data: number
    itens: number
    total: number
    dono: number
    userId: number
    _all: number
  }


  export type FinalizadoAvgAggregateInputType = {
    total?: true
  }

  export type FinalizadoSumAggregateInputType = {
    total?: true
  }

  export type FinalizadoMinAggregateInputType = {
    id?: true
    tipo?: true
    data?: true
    total?: true
    dono?: true
    userId?: true
  }

  export type FinalizadoMaxAggregateInputType = {
    id?: true
    tipo?: true
    data?: true
    total?: true
    dono?: true
    userId?: true
  }

  export type FinalizadoCountAggregateInputType = {
    id?: true
    tipo?: true
    data?: true
    itens?: true
    total?: true
    dono?: true
    userId?: true
    _all?: true
  }

  export type FinalizadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Finalizado to aggregate.
     */
    where?: FinalizadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Finalizados to fetch.
     */
    orderBy?: FinalizadoOrderByWithRelationInput | FinalizadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FinalizadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Finalizados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Finalizados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Finalizados
    **/
    _count?: true | FinalizadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FinalizadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FinalizadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinalizadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinalizadoMaxAggregateInputType
  }

  export type GetFinalizadoAggregateType<T extends FinalizadoAggregateArgs> = {
        [P in keyof T & keyof AggregateFinalizado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinalizado[P]>
      : GetScalarType<T[P], AggregateFinalizado[P]>
  }




  export type FinalizadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinalizadoWhereInput
    orderBy?: FinalizadoOrderByWithAggregationInput | FinalizadoOrderByWithAggregationInput[]
    by: FinalizadoScalarFieldEnum[] | FinalizadoScalarFieldEnum
    having?: FinalizadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinalizadoCountAggregateInputType | true
    _avg?: FinalizadoAvgAggregateInputType
    _sum?: FinalizadoSumAggregateInputType
    _min?: FinalizadoMinAggregateInputType
    _max?: FinalizadoMaxAggregateInputType
  }

  export type FinalizadoGroupByOutputType = {
    id: string
    tipo: string
    data: Date
    itens: JsonValue
    total: number
    dono: string | null
    userId: string
    _count: FinalizadoCountAggregateOutputType | null
    _avg: FinalizadoAvgAggregateOutputType | null
    _sum: FinalizadoSumAggregateOutputType | null
    _min: FinalizadoMinAggregateOutputType | null
    _max: FinalizadoMaxAggregateOutputType | null
  }

  type GetFinalizadoGroupByPayload<T extends FinalizadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FinalizadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinalizadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinalizadoGroupByOutputType[P]>
            : GetScalarType<T[P], FinalizadoGroupByOutputType[P]>
        }
      >
    >


  export type FinalizadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    data?: boolean
    itens?: boolean
    total?: boolean
    dono?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["finalizado"]>

  export type FinalizadoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    data?: boolean
    itens?: boolean
    total?: boolean
    dono?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["finalizado"]>

  export type FinalizadoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    data?: boolean
    itens?: boolean
    total?: boolean
    dono?: boolean
    userId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["finalizado"]>

  export type FinalizadoSelectScalar = {
    id?: boolean
    tipo?: boolean
    data?: boolean
    itens?: boolean
    total?: boolean
    dono?: boolean
    userId?: boolean
  }

  export type FinalizadoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tipo" | "data" | "itens" | "total" | "dono" | "userId", ExtArgs["result"]["finalizado"]>
  export type FinalizadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type FinalizadoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type FinalizadoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $FinalizadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Finalizado"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tipo: string
      data: Date
      itens: Prisma.JsonValue
      total: number
      dono: string | null
      userId: string
    }, ExtArgs["result"]["finalizado"]>
    composites: {}
  }

  type FinalizadoGetPayload<S extends boolean | null | undefined | FinalizadoDefaultArgs> = $Result.GetResult<Prisma.$FinalizadoPayload, S>

  type FinalizadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FinalizadoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FinalizadoCountAggregateInputType | true
    }

  export interface FinalizadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Finalizado'], meta: { name: 'Finalizado' } }
    /**
     * Find zero or one Finalizado that matches the filter.
     * @param {FinalizadoFindUniqueArgs} args - Arguments to find a Finalizado
     * @example
     * // Get one Finalizado
     * const finalizado = await prisma.finalizado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FinalizadoFindUniqueArgs>(args: SelectSubset<T, FinalizadoFindUniqueArgs<ExtArgs>>): Prisma__FinalizadoClient<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Finalizado that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FinalizadoFindUniqueOrThrowArgs} args - Arguments to find a Finalizado
     * @example
     * // Get one Finalizado
     * const finalizado = await prisma.finalizado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FinalizadoFindUniqueOrThrowArgs>(args: SelectSubset<T, FinalizadoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FinalizadoClient<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Finalizado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalizadoFindFirstArgs} args - Arguments to find a Finalizado
     * @example
     * // Get one Finalizado
     * const finalizado = await prisma.finalizado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FinalizadoFindFirstArgs>(args?: SelectSubset<T, FinalizadoFindFirstArgs<ExtArgs>>): Prisma__FinalizadoClient<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Finalizado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalizadoFindFirstOrThrowArgs} args - Arguments to find a Finalizado
     * @example
     * // Get one Finalizado
     * const finalizado = await prisma.finalizado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FinalizadoFindFirstOrThrowArgs>(args?: SelectSubset<T, FinalizadoFindFirstOrThrowArgs<ExtArgs>>): Prisma__FinalizadoClient<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Finalizados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalizadoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Finalizados
     * const finalizados = await prisma.finalizado.findMany()
     * 
     * // Get first 10 Finalizados
     * const finalizados = await prisma.finalizado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const finalizadoWithIdOnly = await prisma.finalizado.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FinalizadoFindManyArgs>(args?: SelectSubset<T, FinalizadoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Finalizado.
     * @param {FinalizadoCreateArgs} args - Arguments to create a Finalizado.
     * @example
     * // Create one Finalizado
     * const Finalizado = await prisma.finalizado.create({
     *   data: {
     *     // ... data to create a Finalizado
     *   }
     * })
     * 
     */
    create<T extends FinalizadoCreateArgs>(args: SelectSubset<T, FinalizadoCreateArgs<ExtArgs>>): Prisma__FinalizadoClient<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Finalizados.
     * @param {FinalizadoCreateManyArgs} args - Arguments to create many Finalizados.
     * @example
     * // Create many Finalizados
     * const finalizado = await prisma.finalizado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FinalizadoCreateManyArgs>(args?: SelectSubset<T, FinalizadoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Finalizados and returns the data saved in the database.
     * @param {FinalizadoCreateManyAndReturnArgs} args - Arguments to create many Finalizados.
     * @example
     * // Create many Finalizados
     * const finalizado = await prisma.finalizado.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Finalizados and only return the `id`
     * const finalizadoWithIdOnly = await prisma.finalizado.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FinalizadoCreateManyAndReturnArgs>(args?: SelectSubset<T, FinalizadoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Finalizado.
     * @param {FinalizadoDeleteArgs} args - Arguments to delete one Finalizado.
     * @example
     * // Delete one Finalizado
     * const Finalizado = await prisma.finalizado.delete({
     *   where: {
     *     // ... filter to delete one Finalizado
     *   }
     * })
     * 
     */
    delete<T extends FinalizadoDeleteArgs>(args: SelectSubset<T, FinalizadoDeleteArgs<ExtArgs>>): Prisma__FinalizadoClient<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Finalizado.
     * @param {FinalizadoUpdateArgs} args - Arguments to update one Finalizado.
     * @example
     * // Update one Finalizado
     * const finalizado = await prisma.finalizado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FinalizadoUpdateArgs>(args: SelectSubset<T, FinalizadoUpdateArgs<ExtArgs>>): Prisma__FinalizadoClient<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Finalizados.
     * @param {FinalizadoDeleteManyArgs} args - Arguments to filter Finalizados to delete.
     * @example
     * // Delete a few Finalizados
     * const { count } = await prisma.finalizado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FinalizadoDeleteManyArgs>(args?: SelectSubset<T, FinalizadoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Finalizados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalizadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Finalizados
     * const finalizado = await prisma.finalizado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FinalizadoUpdateManyArgs>(args: SelectSubset<T, FinalizadoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Finalizados and returns the data updated in the database.
     * @param {FinalizadoUpdateManyAndReturnArgs} args - Arguments to update many Finalizados.
     * @example
     * // Update many Finalizados
     * const finalizado = await prisma.finalizado.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Finalizados and only return the `id`
     * const finalizadoWithIdOnly = await prisma.finalizado.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FinalizadoUpdateManyAndReturnArgs>(args: SelectSubset<T, FinalizadoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Finalizado.
     * @param {FinalizadoUpsertArgs} args - Arguments to update or create a Finalizado.
     * @example
     * // Update or create a Finalizado
     * const finalizado = await prisma.finalizado.upsert({
     *   create: {
     *     // ... data to create a Finalizado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Finalizado we want to update
     *   }
     * })
     */
    upsert<T extends FinalizadoUpsertArgs>(args: SelectSubset<T, FinalizadoUpsertArgs<ExtArgs>>): Prisma__FinalizadoClient<$Result.GetResult<Prisma.$FinalizadoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Finalizados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalizadoCountArgs} args - Arguments to filter Finalizados to count.
     * @example
     * // Count the number of Finalizados
     * const count = await prisma.finalizado.count({
     *   where: {
     *     // ... the filter for the Finalizados we want to count
     *   }
     * })
    **/
    count<T extends FinalizadoCountArgs>(
      args?: Subset<T, FinalizadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinalizadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Finalizado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalizadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinalizadoAggregateArgs>(args: Subset<T, FinalizadoAggregateArgs>): Prisma.PrismaPromise<GetFinalizadoAggregateType<T>>

    /**
     * Group by Finalizado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalizadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FinalizadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FinalizadoGroupByArgs['orderBy'] }
        : { orderBy?: FinalizadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FinalizadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinalizadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Finalizado model
   */
  readonly fields: FinalizadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Finalizado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FinalizadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Finalizado model
   */
  interface FinalizadoFieldRefs {
    readonly id: FieldRef<"Finalizado", 'String'>
    readonly tipo: FieldRef<"Finalizado", 'String'>
    readonly data: FieldRef<"Finalizado", 'DateTime'>
    readonly itens: FieldRef<"Finalizado", 'Json'>
    readonly total: FieldRef<"Finalizado", 'Float'>
    readonly dono: FieldRef<"Finalizado", 'String'>
    readonly userId: FieldRef<"Finalizado", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Finalizado findUnique
   */
  export type FinalizadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoInclude<ExtArgs> | null
    /**
     * Filter, which Finalizado to fetch.
     */
    where: FinalizadoWhereUniqueInput
  }

  /**
   * Finalizado findUniqueOrThrow
   */
  export type FinalizadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoInclude<ExtArgs> | null
    /**
     * Filter, which Finalizado to fetch.
     */
    where: FinalizadoWhereUniqueInput
  }

  /**
   * Finalizado findFirst
   */
  export type FinalizadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoInclude<ExtArgs> | null
    /**
     * Filter, which Finalizado to fetch.
     */
    where?: FinalizadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Finalizados to fetch.
     */
    orderBy?: FinalizadoOrderByWithRelationInput | FinalizadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Finalizados.
     */
    cursor?: FinalizadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Finalizados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Finalizados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Finalizados.
     */
    distinct?: FinalizadoScalarFieldEnum | FinalizadoScalarFieldEnum[]
  }

  /**
   * Finalizado findFirstOrThrow
   */
  export type FinalizadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoInclude<ExtArgs> | null
    /**
     * Filter, which Finalizado to fetch.
     */
    where?: FinalizadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Finalizados to fetch.
     */
    orderBy?: FinalizadoOrderByWithRelationInput | FinalizadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Finalizados.
     */
    cursor?: FinalizadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Finalizados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Finalizados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Finalizados.
     */
    distinct?: FinalizadoScalarFieldEnum | FinalizadoScalarFieldEnum[]
  }

  /**
   * Finalizado findMany
   */
  export type FinalizadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoInclude<ExtArgs> | null
    /**
     * Filter, which Finalizados to fetch.
     */
    where?: FinalizadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Finalizados to fetch.
     */
    orderBy?: FinalizadoOrderByWithRelationInput | FinalizadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Finalizados.
     */
    cursor?: FinalizadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Finalizados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Finalizados.
     */
    skip?: number
    distinct?: FinalizadoScalarFieldEnum | FinalizadoScalarFieldEnum[]
  }

  /**
   * Finalizado create
   */
  export type FinalizadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoInclude<ExtArgs> | null
    /**
     * The data needed to create a Finalizado.
     */
    data: XOR<FinalizadoCreateInput, FinalizadoUncheckedCreateInput>
  }

  /**
   * Finalizado createMany
   */
  export type FinalizadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Finalizados.
     */
    data: FinalizadoCreateManyInput | FinalizadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Finalizado createManyAndReturn
   */
  export type FinalizadoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * The data used to create many Finalizados.
     */
    data: FinalizadoCreateManyInput | FinalizadoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Finalizado update
   */
  export type FinalizadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoInclude<ExtArgs> | null
    /**
     * The data needed to update a Finalizado.
     */
    data: XOR<FinalizadoUpdateInput, FinalizadoUncheckedUpdateInput>
    /**
     * Choose, which Finalizado to update.
     */
    where: FinalizadoWhereUniqueInput
  }

  /**
   * Finalizado updateMany
   */
  export type FinalizadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Finalizados.
     */
    data: XOR<FinalizadoUpdateManyMutationInput, FinalizadoUncheckedUpdateManyInput>
    /**
     * Filter which Finalizados to update
     */
    where?: FinalizadoWhereInput
    /**
     * Limit how many Finalizados to update.
     */
    limit?: number
  }

  /**
   * Finalizado updateManyAndReturn
   */
  export type FinalizadoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * The data used to update Finalizados.
     */
    data: XOR<FinalizadoUpdateManyMutationInput, FinalizadoUncheckedUpdateManyInput>
    /**
     * Filter which Finalizados to update
     */
    where?: FinalizadoWhereInput
    /**
     * Limit how many Finalizados to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Finalizado upsert
   */
  export type FinalizadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoInclude<ExtArgs> | null
    /**
     * The filter to search for the Finalizado to update in case it exists.
     */
    where: FinalizadoWhereUniqueInput
    /**
     * In case the Finalizado found by the `where` argument doesn't exist, create a new Finalizado with this data.
     */
    create: XOR<FinalizadoCreateInput, FinalizadoUncheckedCreateInput>
    /**
     * In case the Finalizado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FinalizadoUpdateInput, FinalizadoUncheckedUpdateInput>
  }

  /**
   * Finalizado delete
   */
  export type FinalizadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoInclude<ExtArgs> | null
    /**
     * Filter which Finalizado to delete.
     */
    where: FinalizadoWhereUniqueInput
  }

  /**
   * Finalizado deleteMany
   */
  export type FinalizadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Finalizados to delete
     */
    where?: FinalizadoWhereInput
    /**
     * Limit how many Finalizados to delete.
     */
    limit?: number
  }

  /**
   * Finalizado without action
   */
  export type FinalizadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Finalizado
     */
    select?: FinalizadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Finalizado
     */
    omit?: FinalizadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalizadoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    email: 'email',
    senha: 'senha'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    valor: 'valor',
    unidades: 'unidades',
    variantes: 'variantes',
    userId: 'userId'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const ComandaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    itens: 'itens',
    total: 'total',
    dono: 'dono',
    status: 'status',
    criadaEm: 'criadaEm',
    encerradaEm: 'encerradaEm',
    userId: 'userId'
  };

  export type ComandaScalarFieldEnum = (typeof ComandaScalarFieldEnum)[keyof typeof ComandaScalarFieldEnum]


  export const QuartoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    tempo: 'tempo',
    valor: 'valor',
    observacoes: 'observacoes',
    multa: 'multa',
    taxa: 'taxa',
    itens: 'itens',
    status: 'status',
    criadaEm: 'criadaEm',
    encerradoEm: 'encerradoEm',
    userId: 'userId'
  };

  export type QuartoScalarFieldEnum = (typeof QuartoScalarFieldEnum)[keyof typeof QuartoScalarFieldEnum]


  export const FinalizadoScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    data: 'data',
    itens: 'itens',
    total: 'total',
    dono: 'dono',
    userId: 'userId'
  };

  export type FinalizadoScalarFieldEnum = (typeof FinalizadoScalarFieldEnum)[keyof typeof FinalizadoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    produtos?: ProdutoListRelationFilter
    comandas?: ComandaListRelationFilter
    quartos?: QuartoListRelationFilter
    finalizados?: FinalizadoListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    produtos?: ProdutoOrderByRelationAggregateInput
    comandas?: ComandaOrderByRelationAggregateInput
    quartos?: QuartoOrderByRelationAggregateInput
    finalizados?: FinalizadoOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    senha?: StringFilter<"Usuario"> | string
    produtos?: ProdutoListRelationFilter
    comandas?: ComandaListRelationFilter
    quartos?: QuartoListRelationFilter
    finalizados?: FinalizadoListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
  }

  export type ProdutoWhereInput = {
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    id?: StringFilter<"Produto"> | string
    nome?: StringFilter<"Produto"> | string
    valor?: FloatFilter<"Produto"> | number
    unidades?: IntFilter<"Produto"> | number
    variantes?: StringNullableListFilter<"Produto">
    userId?: StringFilter<"Produto"> | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type ProdutoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    unidades?: SortOrder
    variantes?: SortOrder
    userId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type ProdutoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    nome?: StringFilter<"Produto"> | string
    valor?: FloatFilter<"Produto"> | number
    unidades?: IntFilter<"Produto"> | number
    variantes?: StringNullableListFilter<"Produto">
    userId?: StringFilter<"Produto"> | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type ProdutoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    unidades?: SortOrder
    variantes?: SortOrder
    userId?: SortOrder
    _count?: ProdutoCountOrderByAggregateInput
    _avg?: ProdutoAvgOrderByAggregateInput
    _max?: ProdutoMaxOrderByAggregateInput
    _min?: ProdutoMinOrderByAggregateInput
    _sum?: ProdutoSumOrderByAggregateInput
  }

  export type ProdutoScalarWhereWithAggregatesInput = {
    AND?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    OR?: ProdutoScalarWhereWithAggregatesInput[]
    NOT?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Produto"> | string
    nome?: StringWithAggregatesFilter<"Produto"> | string
    valor?: FloatWithAggregatesFilter<"Produto"> | number
    unidades?: IntWithAggregatesFilter<"Produto"> | number
    variantes?: StringNullableListFilter<"Produto">
    userId?: StringWithAggregatesFilter<"Produto"> | string
  }

  export type ComandaWhereInput = {
    AND?: ComandaWhereInput | ComandaWhereInput[]
    OR?: ComandaWhereInput[]
    NOT?: ComandaWhereInput | ComandaWhereInput[]
    id?: StringFilter<"Comanda"> | string
    nome?: StringFilter<"Comanda"> | string
    itens?: JsonFilter<"Comanda">
    total?: FloatFilter<"Comanda"> | number
    dono?: StringFilter<"Comanda"> | string
    status?: StringFilter<"Comanda"> | string
    criadaEm?: DateTimeFilter<"Comanda"> | Date | string
    encerradaEm?: DateTimeNullableFilter<"Comanda"> | Date | string | null
    userId?: StringFilter<"Comanda"> | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type ComandaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    itens?: SortOrder
    total?: SortOrder
    dono?: SortOrder
    status?: SortOrder
    criadaEm?: SortOrder
    encerradaEm?: SortOrderInput | SortOrder
    userId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type ComandaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ComandaWhereInput | ComandaWhereInput[]
    OR?: ComandaWhereInput[]
    NOT?: ComandaWhereInput | ComandaWhereInput[]
    nome?: StringFilter<"Comanda"> | string
    itens?: JsonFilter<"Comanda">
    total?: FloatFilter<"Comanda"> | number
    dono?: StringFilter<"Comanda"> | string
    status?: StringFilter<"Comanda"> | string
    criadaEm?: DateTimeFilter<"Comanda"> | Date | string
    encerradaEm?: DateTimeNullableFilter<"Comanda"> | Date | string | null
    userId?: StringFilter<"Comanda"> | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type ComandaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    itens?: SortOrder
    total?: SortOrder
    dono?: SortOrder
    status?: SortOrder
    criadaEm?: SortOrder
    encerradaEm?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: ComandaCountOrderByAggregateInput
    _avg?: ComandaAvgOrderByAggregateInput
    _max?: ComandaMaxOrderByAggregateInput
    _min?: ComandaMinOrderByAggregateInput
    _sum?: ComandaSumOrderByAggregateInput
  }

  export type ComandaScalarWhereWithAggregatesInput = {
    AND?: ComandaScalarWhereWithAggregatesInput | ComandaScalarWhereWithAggregatesInput[]
    OR?: ComandaScalarWhereWithAggregatesInput[]
    NOT?: ComandaScalarWhereWithAggregatesInput | ComandaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comanda"> | string
    nome?: StringWithAggregatesFilter<"Comanda"> | string
    itens?: JsonWithAggregatesFilter<"Comanda">
    total?: FloatWithAggregatesFilter<"Comanda"> | number
    dono?: StringWithAggregatesFilter<"Comanda"> | string
    status?: StringWithAggregatesFilter<"Comanda"> | string
    criadaEm?: DateTimeWithAggregatesFilter<"Comanda"> | Date | string
    encerradaEm?: DateTimeNullableWithAggregatesFilter<"Comanda"> | Date | string | null
    userId?: StringWithAggregatesFilter<"Comanda"> | string
  }

  export type QuartoWhereInput = {
    AND?: QuartoWhereInput | QuartoWhereInput[]
    OR?: QuartoWhereInput[]
    NOT?: QuartoWhereInput | QuartoWhereInput[]
    id?: StringFilter<"Quarto"> | string
    nome?: StringFilter<"Quarto"> | string
    tempo?: StringFilter<"Quarto"> | string
    valor?: FloatFilter<"Quarto"> | number
    observacoes?: StringFilter<"Quarto"> | string
    multa?: FloatFilter<"Quarto"> | number
    taxa?: FloatFilter<"Quarto"> | number
    itens?: JsonFilter<"Quarto">
    status?: StringFilter<"Quarto"> | string
    criadaEm?: DateTimeFilter<"Quarto"> | Date | string
    encerradoEm?: DateTimeNullableFilter<"Quarto"> | Date | string | null
    userId?: StringFilter<"Quarto"> | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type QuartoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    tempo?: SortOrder
    valor?: SortOrder
    observacoes?: SortOrder
    multa?: SortOrder
    taxa?: SortOrder
    itens?: SortOrder
    status?: SortOrder
    criadaEm?: SortOrder
    encerradoEm?: SortOrderInput | SortOrder
    userId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type QuartoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuartoWhereInput | QuartoWhereInput[]
    OR?: QuartoWhereInput[]
    NOT?: QuartoWhereInput | QuartoWhereInput[]
    nome?: StringFilter<"Quarto"> | string
    tempo?: StringFilter<"Quarto"> | string
    valor?: FloatFilter<"Quarto"> | number
    observacoes?: StringFilter<"Quarto"> | string
    multa?: FloatFilter<"Quarto"> | number
    taxa?: FloatFilter<"Quarto"> | number
    itens?: JsonFilter<"Quarto">
    status?: StringFilter<"Quarto"> | string
    criadaEm?: DateTimeFilter<"Quarto"> | Date | string
    encerradoEm?: DateTimeNullableFilter<"Quarto"> | Date | string | null
    userId?: StringFilter<"Quarto"> | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type QuartoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    tempo?: SortOrder
    valor?: SortOrder
    observacoes?: SortOrder
    multa?: SortOrder
    taxa?: SortOrder
    itens?: SortOrder
    status?: SortOrder
    criadaEm?: SortOrder
    encerradoEm?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: QuartoCountOrderByAggregateInput
    _avg?: QuartoAvgOrderByAggregateInput
    _max?: QuartoMaxOrderByAggregateInput
    _min?: QuartoMinOrderByAggregateInput
    _sum?: QuartoSumOrderByAggregateInput
  }

  export type QuartoScalarWhereWithAggregatesInput = {
    AND?: QuartoScalarWhereWithAggregatesInput | QuartoScalarWhereWithAggregatesInput[]
    OR?: QuartoScalarWhereWithAggregatesInput[]
    NOT?: QuartoScalarWhereWithAggregatesInput | QuartoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Quarto"> | string
    nome?: StringWithAggregatesFilter<"Quarto"> | string
    tempo?: StringWithAggregatesFilter<"Quarto"> | string
    valor?: FloatWithAggregatesFilter<"Quarto"> | number
    observacoes?: StringWithAggregatesFilter<"Quarto"> | string
    multa?: FloatWithAggregatesFilter<"Quarto"> | number
    taxa?: FloatWithAggregatesFilter<"Quarto"> | number
    itens?: JsonWithAggregatesFilter<"Quarto">
    status?: StringWithAggregatesFilter<"Quarto"> | string
    criadaEm?: DateTimeWithAggregatesFilter<"Quarto"> | Date | string
    encerradoEm?: DateTimeNullableWithAggregatesFilter<"Quarto"> | Date | string | null
    userId?: StringWithAggregatesFilter<"Quarto"> | string
  }

  export type FinalizadoWhereInput = {
    AND?: FinalizadoWhereInput | FinalizadoWhereInput[]
    OR?: FinalizadoWhereInput[]
    NOT?: FinalizadoWhereInput | FinalizadoWhereInput[]
    id?: StringFilter<"Finalizado"> | string
    tipo?: StringFilter<"Finalizado"> | string
    data?: DateTimeFilter<"Finalizado"> | Date | string
    itens?: JsonFilter<"Finalizado">
    total?: FloatFilter<"Finalizado"> | number
    dono?: StringNullableFilter<"Finalizado"> | string | null
    userId?: StringFilter<"Finalizado"> | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type FinalizadoOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    itens?: SortOrder
    total?: SortOrder
    dono?: SortOrderInput | SortOrder
    userId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type FinalizadoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FinalizadoWhereInput | FinalizadoWhereInput[]
    OR?: FinalizadoWhereInput[]
    NOT?: FinalizadoWhereInput | FinalizadoWhereInput[]
    tipo?: StringFilter<"Finalizado"> | string
    data?: DateTimeFilter<"Finalizado"> | Date | string
    itens?: JsonFilter<"Finalizado">
    total?: FloatFilter<"Finalizado"> | number
    dono?: StringNullableFilter<"Finalizado"> | string | null
    userId?: StringFilter<"Finalizado"> | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type FinalizadoOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    itens?: SortOrder
    total?: SortOrder
    dono?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: FinalizadoCountOrderByAggregateInput
    _avg?: FinalizadoAvgOrderByAggregateInput
    _max?: FinalizadoMaxOrderByAggregateInput
    _min?: FinalizadoMinOrderByAggregateInput
    _sum?: FinalizadoSumOrderByAggregateInput
  }

  export type FinalizadoScalarWhereWithAggregatesInput = {
    AND?: FinalizadoScalarWhereWithAggregatesInput | FinalizadoScalarWhereWithAggregatesInput[]
    OR?: FinalizadoScalarWhereWithAggregatesInput[]
    NOT?: FinalizadoScalarWhereWithAggregatesInput | FinalizadoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Finalizado"> | string
    tipo?: StringWithAggregatesFilter<"Finalizado"> | string
    data?: DateTimeWithAggregatesFilter<"Finalizado"> | Date | string
    itens?: JsonWithAggregatesFilter<"Finalizado">
    total?: FloatWithAggregatesFilter<"Finalizado"> | number
    dono?: StringNullableWithAggregatesFilter<"Finalizado"> | string | null
    userId?: StringWithAggregatesFilter<"Finalizado"> | string
  }

  export type UsuarioCreateInput = {
    id?: string
    email: string
    senha: string
    produtos?: ProdutoCreateNestedManyWithoutUsuarioInput
    comandas?: ComandaCreateNestedManyWithoutUsuarioInput
    quartos?: QuartoCreateNestedManyWithoutUsuarioInput
    finalizados?: FinalizadoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: string
    email: string
    senha: string
    produtos?: ProdutoUncheckedCreateNestedManyWithoutUsuarioInput
    comandas?: ComandaUncheckedCreateNestedManyWithoutUsuarioInput
    quartos?: QuartoUncheckedCreateNestedManyWithoutUsuarioInput
    finalizados?: FinalizadoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUpdateManyWithoutUsuarioNestedInput
    comandas?: ComandaUpdateManyWithoutUsuarioNestedInput
    quartos?: QuartoUpdateManyWithoutUsuarioNestedInput
    finalizados?: FinalizadoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUncheckedUpdateManyWithoutUsuarioNestedInput
    comandas?: ComandaUncheckedUpdateManyWithoutUsuarioNestedInput
    quartos?: QuartoUncheckedUpdateManyWithoutUsuarioNestedInput
    finalizados?: FinalizadoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: string
    email: string
    senha: string
  }

  export type UsuarioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoCreateInput = {
    id?: string
    nome: string
    valor: number
    unidades: number
    variantes?: ProdutoCreatevariantesInput | string[]
    usuario: UsuarioCreateNestedOneWithoutProdutosInput
  }

  export type ProdutoUncheckedCreateInput = {
    id?: string
    nome: string
    valor: number
    unidades: number
    variantes?: ProdutoCreatevariantesInput | string[]
    userId: string
  }

  export type ProdutoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    unidades?: IntFieldUpdateOperationsInput | number
    variantes?: ProdutoUpdatevariantesInput | string[]
    usuario?: UsuarioUpdateOneRequiredWithoutProdutosNestedInput
  }

  export type ProdutoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    unidades?: IntFieldUpdateOperationsInput | number
    variantes?: ProdutoUpdatevariantesInput | string[]
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoCreateManyInput = {
    id?: string
    nome: string
    valor: number
    unidades: number
    variantes?: ProdutoCreatevariantesInput | string[]
    userId: string
  }

  export type ProdutoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    unidades?: IntFieldUpdateOperationsInput | number
    variantes?: ProdutoUpdatevariantesInput | string[]
  }

  export type ProdutoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    unidades?: IntFieldUpdateOperationsInput | number
    variantes?: ProdutoUpdatevariantesInput | string[]
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ComandaCreateInput = {
    id?: string
    nome: string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono: string
    status: string
    criadaEm?: Date | string
    encerradaEm?: Date | string | null
    usuario: UsuarioCreateNestedOneWithoutComandasInput
  }

  export type ComandaUncheckedCreateInput = {
    id?: string
    nome: string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono: string
    status: string
    criadaEm?: Date | string
    encerradaEm?: Date | string | null
    userId: string
  }

  export type ComandaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradaEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usuario?: UsuarioUpdateOneRequiredWithoutComandasNestedInput
  }

  export type ComandaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradaEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ComandaCreateManyInput = {
    id?: string
    nome: string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono: string
    status: string
    criadaEm?: Date | string
    encerradaEm?: Date | string | null
    userId: string
  }

  export type ComandaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradaEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ComandaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradaEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type QuartoCreateInput = {
    id?: string
    nome: string
    tempo: string
    valor: number
    observacoes: string
    multa: number
    taxa: number
    itens: JsonNullValueInput | InputJsonValue
    status?: string
    criadaEm?: Date | string
    encerradoEm?: Date | string | null
    usuario: UsuarioCreateNestedOneWithoutQuartosInput
  }

  export type QuartoUncheckedCreateInput = {
    id?: string
    nome: string
    tempo: string
    valor: number
    observacoes: string
    multa: number
    taxa: number
    itens: JsonNullValueInput | InputJsonValue
    status?: string
    criadaEm?: Date | string
    encerradoEm?: Date | string | null
    userId: string
  }

  export type QuartoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tempo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    observacoes?: StringFieldUpdateOperationsInput | string
    multa?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    itens?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usuario?: UsuarioUpdateOneRequiredWithoutQuartosNestedInput
  }

  export type QuartoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tempo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    observacoes?: StringFieldUpdateOperationsInput | string
    multa?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    itens?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type QuartoCreateManyInput = {
    id?: string
    nome: string
    tempo: string
    valor: number
    observacoes: string
    multa: number
    taxa: number
    itens: JsonNullValueInput | InputJsonValue
    status?: string
    criadaEm?: Date | string
    encerradoEm?: Date | string | null
    userId: string
  }

  export type QuartoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tempo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    observacoes?: StringFieldUpdateOperationsInput | string
    multa?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    itens?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuartoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tempo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    observacoes?: StringFieldUpdateOperationsInput | string
    multa?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    itens?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FinalizadoCreateInput = {
    id?: string
    tipo: string
    data?: Date | string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono?: string | null
    usuario: UsuarioCreateNestedOneWithoutFinalizadosInput
  }

  export type FinalizadoUncheckedCreateInput = {
    id?: string
    tipo: string
    data?: Date | string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono?: string | null
    userId: string
  }

  export type FinalizadoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: UsuarioUpdateOneRequiredWithoutFinalizadosNestedInput
  }

  export type FinalizadoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FinalizadoCreateManyInput = {
    id?: string
    tipo: string
    data?: Date | string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono?: string | null
    userId: string
  }

  export type FinalizadoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FinalizadoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ProdutoListRelationFilter = {
    every?: ProdutoWhereInput
    some?: ProdutoWhereInput
    none?: ProdutoWhereInput
  }

  export type ComandaListRelationFilter = {
    every?: ComandaWhereInput
    some?: ComandaWhereInput
    none?: ComandaWhereInput
  }

  export type QuartoListRelationFilter = {
    every?: QuartoWhereInput
    some?: QuartoWhereInput
    none?: QuartoWhereInput
  }

  export type FinalizadoListRelationFilter = {
    every?: FinalizadoWhereInput
    some?: FinalizadoWhereInput
    none?: FinalizadoWhereInput
  }

  export type ProdutoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComandaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuartoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FinalizadoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type ProdutoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    unidades?: SortOrder
    variantes?: SortOrder
    userId?: SortOrder
  }

  export type ProdutoAvgOrderByAggregateInput = {
    valor?: SortOrder
    unidades?: SortOrder
  }

  export type ProdutoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    unidades?: SortOrder
    userId?: SortOrder
  }

  export type ProdutoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    unidades?: SortOrder
    userId?: SortOrder
  }

  export type ProdutoSumOrderByAggregateInput = {
    valor?: SortOrder
    unidades?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ComandaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    itens?: SortOrder
    total?: SortOrder
    dono?: SortOrder
    status?: SortOrder
    criadaEm?: SortOrder
    encerradaEm?: SortOrder
    userId?: SortOrder
  }

  export type ComandaAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type ComandaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    total?: SortOrder
    dono?: SortOrder
    status?: SortOrder
    criadaEm?: SortOrder
    encerradaEm?: SortOrder
    userId?: SortOrder
  }

  export type ComandaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    total?: SortOrder
    dono?: SortOrder
    status?: SortOrder
    criadaEm?: SortOrder
    encerradaEm?: SortOrder
    userId?: SortOrder
  }

  export type ComandaSumOrderByAggregateInput = {
    total?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type QuartoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tempo?: SortOrder
    valor?: SortOrder
    observacoes?: SortOrder
    multa?: SortOrder
    taxa?: SortOrder
    itens?: SortOrder
    status?: SortOrder
    criadaEm?: SortOrder
    encerradoEm?: SortOrder
    userId?: SortOrder
  }

  export type QuartoAvgOrderByAggregateInput = {
    valor?: SortOrder
    multa?: SortOrder
    taxa?: SortOrder
  }

  export type QuartoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tempo?: SortOrder
    valor?: SortOrder
    observacoes?: SortOrder
    multa?: SortOrder
    taxa?: SortOrder
    status?: SortOrder
    criadaEm?: SortOrder
    encerradoEm?: SortOrder
    userId?: SortOrder
  }

  export type QuartoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tempo?: SortOrder
    valor?: SortOrder
    observacoes?: SortOrder
    multa?: SortOrder
    taxa?: SortOrder
    status?: SortOrder
    criadaEm?: SortOrder
    encerradoEm?: SortOrder
    userId?: SortOrder
  }

  export type QuartoSumOrderByAggregateInput = {
    valor?: SortOrder
    multa?: SortOrder
    taxa?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FinalizadoCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    itens?: SortOrder
    total?: SortOrder
    dono?: SortOrder
    userId?: SortOrder
  }

  export type FinalizadoAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type FinalizadoMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    total?: SortOrder
    dono?: SortOrder
    userId?: SortOrder
  }

  export type FinalizadoMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    total?: SortOrder
    dono?: SortOrder
    userId?: SortOrder
  }

  export type FinalizadoSumOrderByAggregateInput = {
    total?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ProdutoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ProdutoCreateWithoutUsuarioInput, ProdutoUncheckedCreateWithoutUsuarioInput> | ProdutoCreateWithoutUsuarioInput[] | ProdutoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutUsuarioInput | ProdutoCreateOrConnectWithoutUsuarioInput[]
    createMany?: ProdutoCreateManyUsuarioInputEnvelope
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
  }

  export type ComandaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ComandaCreateWithoutUsuarioInput, ComandaUncheckedCreateWithoutUsuarioInput> | ComandaCreateWithoutUsuarioInput[] | ComandaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ComandaCreateOrConnectWithoutUsuarioInput | ComandaCreateOrConnectWithoutUsuarioInput[]
    createMany?: ComandaCreateManyUsuarioInputEnvelope
    connect?: ComandaWhereUniqueInput | ComandaWhereUniqueInput[]
  }

  export type QuartoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<QuartoCreateWithoutUsuarioInput, QuartoUncheckedCreateWithoutUsuarioInput> | QuartoCreateWithoutUsuarioInput[] | QuartoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: QuartoCreateOrConnectWithoutUsuarioInput | QuartoCreateOrConnectWithoutUsuarioInput[]
    createMany?: QuartoCreateManyUsuarioInputEnvelope
    connect?: QuartoWhereUniqueInput | QuartoWhereUniqueInput[]
  }

  export type FinalizadoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<FinalizadoCreateWithoutUsuarioInput, FinalizadoUncheckedCreateWithoutUsuarioInput> | FinalizadoCreateWithoutUsuarioInput[] | FinalizadoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: FinalizadoCreateOrConnectWithoutUsuarioInput | FinalizadoCreateOrConnectWithoutUsuarioInput[]
    createMany?: FinalizadoCreateManyUsuarioInputEnvelope
    connect?: FinalizadoWhereUniqueInput | FinalizadoWhereUniqueInput[]
  }

  export type ProdutoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ProdutoCreateWithoutUsuarioInput, ProdutoUncheckedCreateWithoutUsuarioInput> | ProdutoCreateWithoutUsuarioInput[] | ProdutoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutUsuarioInput | ProdutoCreateOrConnectWithoutUsuarioInput[]
    createMany?: ProdutoCreateManyUsuarioInputEnvelope
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
  }

  export type ComandaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ComandaCreateWithoutUsuarioInput, ComandaUncheckedCreateWithoutUsuarioInput> | ComandaCreateWithoutUsuarioInput[] | ComandaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ComandaCreateOrConnectWithoutUsuarioInput | ComandaCreateOrConnectWithoutUsuarioInput[]
    createMany?: ComandaCreateManyUsuarioInputEnvelope
    connect?: ComandaWhereUniqueInput | ComandaWhereUniqueInput[]
  }

  export type QuartoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<QuartoCreateWithoutUsuarioInput, QuartoUncheckedCreateWithoutUsuarioInput> | QuartoCreateWithoutUsuarioInput[] | QuartoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: QuartoCreateOrConnectWithoutUsuarioInput | QuartoCreateOrConnectWithoutUsuarioInput[]
    createMany?: QuartoCreateManyUsuarioInputEnvelope
    connect?: QuartoWhereUniqueInput | QuartoWhereUniqueInput[]
  }

  export type FinalizadoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<FinalizadoCreateWithoutUsuarioInput, FinalizadoUncheckedCreateWithoutUsuarioInput> | FinalizadoCreateWithoutUsuarioInput[] | FinalizadoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: FinalizadoCreateOrConnectWithoutUsuarioInput | FinalizadoCreateOrConnectWithoutUsuarioInput[]
    createMany?: FinalizadoCreateManyUsuarioInputEnvelope
    connect?: FinalizadoWhereUniqueInput | FinalizadoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ProdutoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ProdutoCreateWithoutUsuarioInput, ProdutoUncheckedCreateWithoutUsuarioInput> | ProdutoCreateWithoutUsuarioInput[] | ProdutoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutUsuarioInput | ProdutoCreateOrConnectWithoutUsuarioInput[]
    upsert?: ProdutoUpsertWithWhereUniqueWithoutUsuarioInput | ProdutoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ProdutoCreateManyUsuarioInputEnvelope
    set?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    disconnect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    delete?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    update?: ProdutoUpdateWithWhereUniqueWithoutUsuarioInput | ProdutoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ProdutoUpdateManyWithWhereWithoutUsuarioInput | ProdutoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
  }

  export type ComandaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ComandaCreateWithoutUsuarioInput, ComandaUncheckedCreateWithoutUsuarioInput> | ComandaCreateWithoutUsuarioInput[] | ComandaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ComandaCreateOrConnectWithoutUsuarioInput | ComandaCreateOrConnectWithoutUsuarioInput[]
    upsert?: ComandaUpsertWithWhereUniqueWithoutUsuarioInput | ComandaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ComandaCreateManyUsuarioInputEnvelope
    set?: ComandaWhereUniqueInput | ComandaWhereUniqueInput[]
    disconnect?: ComandaWhereUniqueInput | ComandaWhereUniqueInput[]
    delete?: ComandaWhereUniqueInput | ComandaWhereUniqueInput[]
    connect?: ComandaWhereUniqueInput | ComandaWhereUniqueInput[]
    update?: ComandaUpdateWithWhereUniqueWithoutUsuarioInput | ComandaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ComandaUpdateManyWithWhereWithoutUsuarioInput | ComandaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ComandaScalarWhereInput | ComandaScalarWhereInput[]
  }

  export type QuartoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<QuartoCreateWithoutUsuarioInput, QuartoUncheckedCreateWithoutUsuarioInput> | QuartoCreateWithoutUsuarioInput[] | QuartoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: QuartoCreateOrConnectWithoutUsuarioInput | QuartoCreateOrConnectWithoutUsuarioInput[]
    upsert?: QuartoUpsertWithWhereUniqueWithoutUsuarioInput | QuartoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: QuartoCreateManyUsuarioInputEnvelope
    set?: QuartoWhereUniqueInput | QuartoWhereUniqueInput[]
    disconnect?: QuartoWhereUniqueInput | QuartoWhereUniqueInput[]
    delete?: QuartoWhereUniqueInput | QuartoWhereUniqueInput[]
    connect?: QuartoWhereUniqueInput | QuartoWhereUniqueInput[]
    update?: QuartoUpdateWithWhereUniqueWithoutUsuarioInput | QuartoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: QuartoUpdateManyWithWhereWithoutUsuarioInput | QuartoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: QuartoScalarWhereInput | QuartoScalarWhereInput[]
  }

  export type FinalizadoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<FinalizadoCreateWithoutUsuarioInput, FinalizadoUncheckedCreateWithoutUsuarioInput> | FinalizadoCreateWithoutUsuarioInput[] | FinalizadoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: FinalizadoCreateOrConnectWithoutUsuarioInput | FinalizadoCreateOrConnectWithoutUsuarioInput[]
    upsert?: FinalizadoUpsertWithWhereUniqueWithoutUsuarioInput | FinalizadoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: FinalizadoCreateManyUsuarioInputEnvelope
    set?: FinalizadoWhereUniqueInput | FinalizadoWhereUniqueInput[]
    disconnect?: FinalizadoWhereUniqueInput | FinalizadoWhereUniqueInput[]
    delete?: FinalizadoWhereUniqueInput | FinalizadoWhereUniqueInput[]
    connect?: FinalizadoWhereUniqueInput | FinalizadoWhereUniqueInput[]
    update?: FinalizadoUpdateWithWhereUniqueWithoutUsuarioInput | FinalizadoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: FinalizadoUpdateManyWithWhereWithoutUsuarioInput | FinalizadoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: FinalizadoScalarWhereInput | FinalizadoScalarWhereInput[]
  }

  export type ProdutoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ProdutoCreateWithoutUsuarioInput, ProdutoUncheckedCreateWithoutUsuarioInput> | ProdutoCreateWithoutUsuarioInput[] | ProdutoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ProdutoCreateOrConnectWithoutUsuarioInput | ProdutoCreateOrConnectWithoutUsuarioInput[]
    upsert?: ProdutoUpsertWithWhereUniqueWithoutUsuarioInput | ProdutoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ProdutoCreateManyUsuarioInputEnvelope
    set?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    disconnect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    delete?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    connect?: ProdutoWhereUniqueInput | ProdutoWhereUniqueInput[]
    update?: ProdutoUpdateWithWhereUniqueWithoutUsuarioInput | ProdutoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ProdutoUpdateManyWithWhereWithoutUsuarioInput | ProdutoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
  }

  export type ComandaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ComandaCreateWithoutUsuarioInput, ComandaUncheckedCreateWithoutUsuarioInput> | ComandaCreateWithoutUsuarioInput[] | ComandaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ComandaCreateOrConnectWithoutUsuarioInput | ComandaCreateOrConnectWithoutUsuarioInput[]
    upsert?: ComandaUpsertWithWhereUniqueWithoutUsuarioInput | ComandaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ComandaCreateManyUsuarioInputEnvelope
    set?: ComandaWhereUniqueInput | ComandaWhereUniqueInput[]
    disconnect?: ComandaWhereUniqueInput | ComandaWhereUniqueInput[]
    delete?: ComandaWhereUniqueInput | ComandaWhereUniqueInput[]
    connect?: ComandaWhereUniqueInput | ComandaWhereUniqueInput[]
    update?: ComandaUpdateWithWhereUniqueWithoutUsuarioInput | ComandaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ComandaUpdateManyWithWhereWithoutUsuarioInput | ComandaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ComandaScalarWhereInput | ComandaScalarWhereInput[]
  }

  export type QuartoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<QuartoCreateWithoutUsuarioInput, QuartoUncheckedCreateWithoutUsuarioInput> | QuartoCreateWithoutUsuarioInput[] | QuartoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: QuartoCreateOrConnectWithoutUsuarioInput | QuartoCreateOrConnectWithoutUsuarioInput[]
    upsert?: QuartoUpsertWithWhereUniqueWithoutUsuarioInput | QuartoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: QuartoCreateManyUsuarioInputEnvelope
    set?: QuartoWhereUniqueInput | QuartoWhereUniqueInput[]
    disconnect?: QuartoWhereUniqueInput | QuartoWhereUniqueInput[]
    delete?: QuartoWhereUniqueInput | QuartoWhereUniqueInput[]
    connect?: QuartoWhereUniqueInput | QuartoWhereUniqueInput[]
    update?: QuartoUpdateWithWhereUniqueWithoutUsuarioInput | QuartoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: QuartoUpdateManyWithWhereWithoutUsuarioInput | QuartoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: QuartoScalarWhereInput | QuartoScalarWhereInput[]
  }

  export type FinalizadoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<FinalizadoCreateWithoutUsuarioInput, FinalizadoUncheckedCreateWithoutUsuarioInput> | FinalizadoCreateWithoutUsuarioInput[] | FinalizadoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: FinalizadoCreateOrConnectWithoutUsuarioInput | FinalizadoCreateOrConnectWithoutUsuarioInput[]
    upsert?: FinalizadoUpsertWithWhereUniqueWithoutUsuarioInput | FinalizadoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: FinalizadoCreateManyUsuarioInputEnvelope
    set?: FinalizadoWhereUniqueInput | FinalizadoWhereUniqueInput[]
    disconnect?: FinalizadoWhereUniqueInput | FinalizadoWhereUniqueInput[]
    delete?: FinalizadoWhereUniqueInput | FinalizadoWhereUniqueInput[]
    connect?: FinalizadoWhereUniqueInput | FinalizadoWhereUniqueInput[]
    update?: FinalizadoUpdateWithWhereUniqueWithoutUsuarioInput | FinalizadoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: FinalizadoUpdateManyWithWhereWithoutUsuarioInput | FinalizadoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: FinalizadoScalarWhereInput | FinalizadoScalarWhereInput[]
  }

  export type ProdutoCreatevariantesInput = {
    set: string[]
  }

  export type UsuarioCreateNestedOneWithoutProdutosInput = {
    create?: XOR<UsuarioCreateWithoutProdutosInput, UsuarioUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutProdutosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProdutoUpdatevariantesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UsuarioUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<UsuarioCreateWithoutProdutosInput, UsuarioUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutProdutosInput
    upsert?: UsuarioUpsertWithoutProdutosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutProdutosInput, UsuarioUpdateWithoutProdutosInput>, UsuarioUncheckedUpdateWithoutProdutosInput>
  }

  export type UsuarioCreateNestedOneWithoutComandasInput = {
    create?: XOR<UsuarioCreateWithoutComandasInput, UsuarioUncheckedCreateWithoutComandasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutComandasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UsuarioUpdateOneRequiredWithoutComandasNestedInput = {
    create?: XOR<UsuarioCreateWithoutComandasInput, UsuarioUncheckedCreateWithoutComandasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutComandasInput
    upsert?: UsuarioUpsertWithoutComandasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutComandasInput, UsuarioUpdateWithoutComandasInput>, UsuarioUncheckedUpdateWithoutComandasInput>
  }

  export type UsuarioCreateNestedOneWithoutQuartosInput = {
    create?: XOR<UsuarioCreateWithoutQuartosInput, UsuarioUncheckedCreateWithoutQuartosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutQuartosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutQuartosNestedInput = {
    create?: XOR<UsuarioCreateWithoutQuartosInput, UsuarioUncheckedCreateWithoutQuartosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutQuartosInput
    upsert?: UsuarioUpsertWithoutQuartosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutQuartosInput, UsuarioUpdateWithoutQuartosInput>, UsuarioUncheckedUpdateWithoutQuartosInput>
  }

  export type UsuarioCreateNestedOneWithoutFinalizadosInput = {
    create?: XOR<UsuarioCreateWithoutFinalizadosInput, UsuarioUncheckedCreateWithoutFinalizadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutFinalizadosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UsuarioUpdateOneRequiredWithoutFinalizadosNestedInput = {
    create?: XOR<UsuarioCreateWithoutFinalizadosInput, UsuarioUncheckedCreateWithoutFinalizadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutFinalizadosInput
    upsert?: UsuarioUpsertWithoutFinalizadosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutFinalizadosInput, UsuarioUpdateWithoutFinalizadosInput>, UsuarioUncheckedUpdateWithoutFinalizadosInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ProdutoCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    valor: number
    unidades: number
    variantes?: ProdutoCreatevariantesInput | string[]
  }

  export type ProdutoUncheckedCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    valor: number
    unidades: number
    variantes?: ProdutoCreatevariantesInput | string[]
  }

  export type ProdutoCreateOrConnectWithoutUsuarioInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutUsuarioInput, ProdutoUncheckedCreateWithoutUsuarioInput>
  }

  export type ProdutoCreateManyUsuarioInputEnvelope = {
    data: ProdutoCreateManyUsuarioInput | ProdutoCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type ComandaCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono: string
    status: string
    criadaEm?: Date | string
    encerradaEm?: Date | string | null
  }

  export type ComandaUncheckedCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono: string
    status: string
    criadaEm?: Date | string
    encerradaEm?: Date | string | null
  }

  export type ComandaCreateOrConnectWithoutUsuarioInput = {
    where: ComandaWhereUniqueInput
    create: XOR<ComandaCreateWithoutUsuarioInput, ComandaUncheckedCreateWithoutUsuarioInput>
  }

  export type ComandaCreateManyUsuarioInputEnvelope = {
    data: ComandaCreateManyUsuarioInput | ComandaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type QuartoCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    tempo: string
    valor: number
    observacoes: string
    multa: number
    taxa: number
    itens: JsonNullValueInput | InputJsonValue
    status?: string
    criadaEm?: Date | string
    encerradoEm?: Date | string | null
  }

  export type QuartoUncheckedCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    tempo: string
    valor: number
    observacoes: string
    multa: number
    taxa: number
    itens: JsonNullValueInput | InputJsonValue
    status?: string
    criadaEm?: Date | string
    encerradoEm?: Date | string | null
  }

  export type QuartoCreateOrConnectWithoutUsuarioInput = {
    where: QuartoWhereUniqueInput
    create: XOR<QuartoCreateWithoutUsuarioInput, QuartoUncheckedCreateWithoutUsuarioInput>
  }

  export type QuartoCreateManyUsuarioInputEnvelope = {
    data: QuartoCreateManyUsuarioInput | QuartoCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type FinalizadoCreateWithoutUsuarioInput = {
    id?: string
    tipo: string
    data?: Date | string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono?: string | null
  }

  export type FinalizadoUncheckedCreateWithoutUsuarioInput = {
    id?: string
    tipo: string
    data?: Date | string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono?: string | null
  }

  export type FinalizadoCreateOrConnectWithoutUsuarioInput = {
    where: FinalizadoWhereUniqueInput
    create: XOR<FinalizadoCreateWithoutUsuarioInput, FinalizadoUncheckedCreateWithoutUsuarioInput>
  }

  export type FinalizadoCreateManyUsuarioInputEnvelope = {
    data: FinalizadoCreateManyUsuarioInput | FinalizadoCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type ProdutoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: ProdutoWhereUniqueInput
    update: XOR<ProdutoUpdateWithoutUsuarioInput, ProdutoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ProdutoCreateWithoutUsuarioInput, ProdutoUncheckedCreateWithoutUsuarioInput>
  }

  export type ProdutoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: ProdutoWhereUniqueInput
    data: XOR<ProdutoUpdateWithoutUsuarioInput, ProdutoUncheckedUpdateWithoutUsuarioInput>
  }

  export type ProdutoUpdateManyWithWhereWithoutUsuarioInput = {
    where: ProdutoScalarWhereInput
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ProdutoScalarWhereInput = {
    AND?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
    OR?: ProdutoScalarWhereInput[]
    NOT?: ProdutoScalarWhereInput | ProdutoScalarWhereInput[]
    id?: StringFilter<"Produto"> | string
    nome?: StringFilter<"Produto"> | string
    valor?: FloatFilter<"Produto"> | number
    unidades?: IntFilter<"Produto"> | number
    variantes?: StringNullableListFilter<"Produto">
    userId?: StringFilter<"Produto"> | string
  }

  export type ComandaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: ComandaWhereUniqueInput
    update: XOR<ComandaUpdateWithoutUsuarioInput, ComandaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ComandaCreateWithoutUsuarioInput, ComandaUncheckedCreateWithoutUsuarioInput>
  }

  export type ComandaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: ComandaWhereUniqueInput
    data: XOR<ComandaUpdateWithoutUsuarioInput, ComandaUncheckedUpdateWithoutUsuarioInput>
  }

  export type ComandaUpdateManyWithWhereWithoutUsuarioInput = {
    where: ComandaScalarWhereInput
    data: XOR<ComandaUpdateManyMutationInput, ComandaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ComandaScalarWhereInput = {
    AND?: ComandaScalarWhereInput | ComandaScalarWhereInput[]
    OR?: ComandaScalarWhereInput[]
    NOT?: ComandaScalarWhereInput | ComandaScalarWhereInput[]
    id?: StringFilter<"Comanda"> | string
    nome?: StringFilter<"Comanda"> | string
    itens?: JsonFilter<"Comanda">
    total?: FloatFilter<"Comanda"> | number
    dono?: StringFilter<"Comanda"> | string
    status?: StringFilter<"Comanda"> | string
    criadaEm?: DateTimeFilter<"Comanda"> | Date | string
    encerradaEm?: DateTimeNullableFilter<"Comanda"> | Date | string | null
    userId?: StringFilter<"Comanda"> | string
  }

  export type QuartoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: QuartoWhereUniqueInput
    update: XOR<QuartoUpdateWithoutUsuarioInput, QuartoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<QuartoCreateWithoutUsuarioInput, QuartoUncheckedCreateWithoutUsuarioInput>
  }

  export type QuartoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: QuartoWhereUniqueInput
    data: XOR<QuartoUpdateWithoutUsuarioInput, QuartoUncheckedUpdateWithoutUsuarioInput>
  }

  export type QuartoUpdateManyWithWhereWithoutUsuarioInput = {
    where: QuartoScalarWhereInput
    data: XOR<QuartoUpdateManyMutationInput, QuartoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type QuartoScalarWhereInput = {
    AND?: QuartoScalarWhereInput | QuartoScalarWhereInput[]
    OR?: QuartoScalarWhereInput[]
    NOT?: QuartoScalarWhereInput | QuartoScalarWhereInput[]
    id?: StringFilter<"Quarto"> | string
    nome?: StringFilter<"Quarto"> | string
    tempo?: StringFilter<"Quarto"> | string
    valor?: FloatFilter<"Quarto"> | number
    observacoes?: StringFilter<"Quarto"> | string
    multa?: FloatFilter<"Quarto"> | number
    taxa?: FloatFilter<"Quarto"> | number
    itens?: JsonFilter<"Quarto">
    status?: StringFilter<"Quarto"> | string
    criadaEm?: DateTimeFilter<"Quarto"> | Date | string
    encerradoEm?: DateTimeNullableFilter<"Quarto"> | Date | string | null
    userId?: StringFilter<"Quarto"> | string
  }

  export type FinalizadoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: FinalizadoWhereUniqueInput
    update: XOR<FinalizadoUpdateWithoutUsuarioInput, FinalizadoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<FinalizadoCreateWithoutUsuarioInput, FinalizadoUncheckedCreateWithoutUsuarioInput>
  }

  export type FinalizadoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: FinalizadoWhereUniqueInput
    data: XOR<FinalizadoUpdateWithoutUsuarioInput, FinalizadoUncheckedUpdateWithoutUsuarioInput>
  }

  export type FinalizadoUpdateManyWithWhereWithoutUsuarioInput = {
    where: FinalizadoScalarWhereInput
    data: XOR<FinalizadoUpdateManyMutationInput, FinalizadoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type FinalizadoScalarWhereInput = {
    AND?: FinalizadoScalarWhereInput | FinalizadoScalarWhereInput[]
    OR?: FinalizadoScalarWhereInput[]
    NOT?: FinalizadoScalarWhereInput | FinalizadoScalarWhereInput[]
    id?: StringFilter<"Finalizado"> | string
    tipo?: StringFilter<"Finalizado"> | string
    data?: DateTimeFilter<"Finalizado"> | Date | string
    itens?: JsonFilter<"Finalizado">
    total?: FloatFilter<"Finalizado"> | number
    dono?: StringNullableFilter<"Finalizado"> | string | null
    userId?: StringFilter<"Finalizado"> | string
  }

  export type UsuarioCreateWithoutProdutosInput = {
    id?: string
    email: string
    senha: string
    comandas?: ComandaCreateNestedManyWithoutUsuarioInput
    quartos?: QuartoCreateNestedManyWithoutUsuarioInput
    finalizados?: FinalizadoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutProdutosInput = {
    id?: string
    email: string
    senha: string
    comandas?: ComandaUncheckedCreateNestedManyWithoutUsuarioInput
    quartos?: QuartoUncheckedCreateNestedManyWithoutUsuarioInput
    finalizados?: FinalizadoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutProdutosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutProdutosInput, UsuarioUncheckedCreateWithoutProdutosInput>
  }

  export type UsuarioUpsertWithoutProdutosInput = {
    update: XOR<UsuarioUpdateWithoutProdutosInput, UsuarioUncheckedUpdateWithoutProdutosInput>
    create: XOR<UsuarioCreateWithoutProdutosInput, UsuarioUncheckedCreateWithoutProdutosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutProdutosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutProdutosInput, UsuarioUncheckedUpdateWithoutProdutosInput>
  }

  export type UsuarioUpdateWithoutProdutosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    comandas?: ComandaUpdateManyWithoutUsuarioNestedInput
    quartos?: QuartoUpdateManyWithoutUsuarioNestedInput
    finalizados?: FinalizadoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutProdutosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    comandas?: ComandaUncheckedUpdateManyWithoutUsuarioNestedInput
    quartos?: QuartoUncheckedUpdateManyWithoutUsuarioNestedInput
    finalizados?: FinalizadoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutComandasInput = {
    id?: string
    email: string
    senha: string
    produtos?: ProdutoCreateNestedManyWithoutUsuarioInput
    quartos?: QuartoCreateNestedManyWithoutUsuarioInput
    finalizados?: FinalizadoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutComandasInput = {
    id?: string
    email: string
    senha: string
    produtos?: ProdutoUncheckedCreateNestedManyWithoutUsuarioInput
    quartos?: QuartoUncheckedCreateNestedManyWithoutUsuarioInput
    finalizados?: FinalizadoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutComandasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutComandasInput, UsuarioUncheckedCreateWithoutComandasInput>
  }

  export type UsuarioUpsertWithoutComandasInput = {
    update: XOR<UsuarioUpdateWithoutComandasInput, UsuarioUncheckedUpdateWithoutComandasInput>
    create: XOR<UsuarioCreateWithoutComandasInput, UsuarioUncheckedCreateWithoutComandasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutComandasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutComandasInput, UsuarioUncheckedUpdateWithoutComandasInput>
  }

  export type UsuarioUpdateWithoutComandasInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUpdateManyWithoutUsuarioNestedInput
    quartos?: QuartoUpdateManyWithoutUsuarioNestedInput
    finalizados?: FinalizadoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutComandasInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUncheckedUpdateManyWithoutUsuarioNestedInput
    quartos?: QuartoUncheckedUpdateManyWithoutUsuarioNestedInput
    finalizados?: FinalizadoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutQuartosInput = {
    id?: string
    email: string
    senha: string
    produtos?: ProdutoCreateNestedManyWithoutUsuarioInput
    comandas?: ComandaCreateNestedManyWithoutUsuarioInput
    finalizados?: FinalizadoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutQuartosInput = {
    id?: string
    email: string
    senha: string
    produtos?: ProdutoUncheckedCreateNestedManyWithoutUsuarioInput
    comandas?: ComandaUncheckedCreateNestedManyWithoutUsuarioInput
    finalizados?: FinalizadoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutQuartosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutQuartosInput, UsuarioUncheckedCreateWithoutQuartosInput>
  }

  export type UsuarioUpsertWithoutQuartosInput = {
    update: XOR<UsuarioUpdateWithoutQuartosInput, UsuarioUncheckedUpdateWithoutQuartosInput>
    create: XOR<UsuarioCreateWithoutQuartosInput, UsuarioUncheckedCreateWithoutQuartosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutQuartosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutQuartosInput, UsuarioUncheckedUpdateWithoutQuartosInput>
  }

  export type UsuarioUpdateWithoutQuartosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUpdateManyWithoutUsuarioNestedInput
    comandas?: ComandaUpdateManyWithoutUsuarioNestedInput
    finalizados?: FinalizadoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutQuartosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUncheckedUpdateManyWithoutUsuarioNestedInput
    comandas?: ComandaUncheckedUpdateManyWithoutUsuarioNestedInput
    finalizados?: FinalizadoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutFinalizadosInput = {
    id?: string
    email: string
    senha: string
    produtos?: ProdutoCreateNestedManyWithoutUsuarioInput
    comandas?: ComandaCreateNestedManyWithoutUsuarioInput
    quartos?: QuartoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutFinalizadosInput = {
    id?: string
    email: string
    senha: string
    produtos?: ProdutoUncheckedCreateNestedManyWithoutUsuarioInput
    comandas?: ComandaUncheckedCreateNestedManyWithoutUsuarioInput
    quartos?: QuartoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutFinalizadosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutFinalizadosInput, UsuarioUncheckedCreateWithoutFinalizadosInput>
  }

  export type UsuarioUpsertWithoutFinalizadosInput = {
    update: XOR<UsuarioUpdateWithoutFinalizadosInput, UsuarioUncheckedUpdateWithoutFinalizadosInput>
    create: XOR<UsuarioCreateWithoutFinalizadosInput, UsuarioUncheckedCreateWithoutFinalizadosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutFinalizadosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutFinalizadosInput, UsuarioUncheckedUpdateWithoutFinalizadosInput>
  }

  export type UsuarioUpdateWithoutFinalizadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUpdateManyWithoutUsuarioNestedInput
    comandas?: ComandaUpdateManyWithoutUsuarioNestedInput
    quartos?: QuartoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutFinalizadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutoUncheckedUpdateManyWithoutUsuarioNestedInput
    comandas?: ComandaUncheckedUpdateManyWithoutUsuarioNestedInput
    quartos?: QuartoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ProdutoCreateManyUsuarioInput = {
    id?: string
    nome: string
    valor: number
    unidades: number
    variantes?: ProdutoCreatevariantesInput | string[]
  }

  export type ComandaCreateManyUsuarioInput = {
    id?: string
    nome: string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono: string
    status: string
    criadaEm?: Date | string
    encerradaEm?: Date | string | null
  }

  export type QuartoCreateManyUsuarioInput = {
    id?: string
    nome: string
    tempo: string
    valor: number
    observacoes: string
    multa: number
    taxa: number
    itens: JsonNullValueInput | InputJsonValue
    status?: string
    criadaEm?: Date | string
    encerradoEm?: Date | string | null
  }

  export type FinalizadoCreateManyUsuarioInput = {
    id?: string
    tipo: string
    data?: Date | string
    itens: JsonNullValueInput | InputJsonValue
    total: number
    dono?: string | null
  }

  export type ProdutoUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    unidades?: IntFieldUpdateOperationsInput | number
    variantes?: ProdutoUpdatevariantesInput | string[]
  }

  export type ProdutoUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    unidades?: IntFieldUpdateOperationsInput | number
    variantes?: ProdutoUpdatevariantesInput | string[]
  }

  export type ProdutoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    unidades?: IntFieldUpdateOperationsInput | number
    variantes?: ProdutoUpdatevariantesInput | string[]
  }

  export type ComandaUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradaEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ComandaUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradaEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ComandaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradaEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuartoUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tempo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    observacoes?: StringFieldUpdateOperationsInput | string
    multa?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    itens?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuartoUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tempo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    observacoes?: StringFieldUpdateOperationsInput | string
    multa?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    itens?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuartoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tempo?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    observacoes?: StringFieldUpdateOperationsInput | string
    multa?: FloatFieldUpdateOperationsInput | number
    taxa?: FloatFieldUpdateOperationsInput | number
    itens?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    criadaEm?: DateTimeFieldUpdateOperationsInput | Date | string
    encerradoEm?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FinalizadoUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FinalizadoUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FinalizadoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    itens?: JsonNullValueInput | InputJsonValue
    total?: FloatFieldUpdateOperationsInput | number
    dono?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}